import {
  IsString,
  IsEmail,
  IsOptional,
  IsNumber,
  IsArray,
  IsUUID,
  IsNotEmpty,
  MinLength,
  MaxLength,
  IsPhoneNumber,
  Min,
  Max,
  IsIn,
  IsISO8601,
  IsBoolean,
  Matches,
  IsEnum,
  ArrayMinSize,
  ArrayMaxSize,
  ValidateNested,
} from 'class-validator';
import { Type, Transform } from 'class-transformer';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';

// Enums for better type safety
export enum PlatformType {
  IOS = 'ios',
  ANDROID = 'android',
  WEB = 'web',
}

export enum NotificationType {
  ATTENDANCE = 'attendance',
  ANNOUNCEMENT = 'announcement',
  EMERGENCY = 'emergency',
  REMINDER = 'reminder',
  ALL = 'all',
}

export enum AttendanceLogType {
  CHECK_IN = 'check-in',
  CHECK_OUT = 'check-out',
  ALL = 'all',
}

export enum NotificationPriority {
  LOW = 'low',
  MEDIUM = 'medium',
  HIGH = 'high',
  URGENT = 'urgent',
}

export enum RelationshipType {
  FATHER = 'Father',
  MOTHER = 'Mother',
  GUARDIAN = 'Guardian',
  GRANDFATHER = 'Grandfather',
  GRANDMOTHER = 'Grandmother',
  UNCLE = 'Uncle',
  AUNT = 'Aunt',
  SIBLING = 'Sibling',
  OTHER = 'Other',
}

export class GuardianLoginDto {
  @ApiProperty({
    description: 'Guardian email address',
    example: 'parent@example.com',
  })
  @Transform(({ value }) => value?.toLowerCase().trim())
  @IsEmail({}, { message: 'Invalid email format' })
  @IsNotEmpty({ message: 'Email is required' })
  @MaxLength(100, { message: 'Email must not exceed 100 characters' })
  email: string;

  @ApiProperty({
    description: 'Guardian password',
    example: 'SecurePass123',
    minLength: 6,
    maxLength: 50,
  })
  @IsString({ message: 'Password must be a string' })
  @IsNotEmpty({ message: 'Password is required' })
  @MinLength(6, { message: 'Password must be at least 6 characters' })
  @MaxLength(50, { message: 'Password must not exceed 50 characters' })
  password: string;

  @ApiPropertyOptional({
    description: 'Unique device identifier (UUID generated by mobile app)',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Device ID must be a valid UUID v4' })
  deviceId?: string;

  @ApiPropertyOptional({
    description: 'FCM/APNs token for push notifications',
    example: 'fcm_token_example_123',
  })
  @IsOptional()
  @IsString({ message: 'Device token must be a string' })
  @MaxLength(255, { message: 'Device token must not exceed 255 characters' })
  deviceToken?: string;

  @ApiPropertyOptional({
    description: 'Platform for notification handling',
    enum: PlatformType,
    example: PlatformType.IOS,
  })
  @IsOptional()
  @IsEnum(PlatformType, { message: 'Platform must be ios, android, or web' })
  platform?: PlatformType;
}

export class GuardianLogoutDto {
  @ApiPropertyOptional({
    description: 'Device identifier to remove from active sessions',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Device ID must be a valid UUID v4' })
  deviceId?: string;

  @ApiPropertyOptional({
    description: 'Reason for logout',
    example: 'User initiated logout',
    maxLength: 255,
  })
  @IsOptional()
  @IsString({ message: 'Reason must be a string' })
  @MaxLength(255, { message: 'Reason must not exceed 255 characters' })
  reason?: string;
}

export class GuardianRegisterDto {
  @ApiProperty({
    description: 'Guardian first name',
    example: 'Juan',
    minLength: 2,
    maxLength: 100,
  })
  @IsNotEmpty({ message: 'First name is required' })
  @IsString({ message: 'First name must be a string' })
  @MinLength(2, { message: 'First name must be at least 2 characters' })
  @MaxLength(100, { message: 'First name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'First name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  firstName: string;

  @ApiProperty({
    description: 'Guardian last name',
    example: 'Dela Cruz',
    minLength: 2,
    maxLength: 100,
  })
  @IsNotEmpty({ message: 'Last name is required' })
  @IsString({ message: 'Last name must be a string' })
  @MinLength(2, { message: 'Last name must be at least 2 characters' })
  @MaxLength(100, { message: 'Last name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'Last name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  lastName: string;

  @ApiPropertyOptional({
    description: 'Guardian middle name',
    example: 'Santos',
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'Middle name must be a string' })
  @MaxLength(100, { message: 'Middle name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'Middle name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  middleName?: string;

  @ApiProperty({
    description: 'Date of birth (ISO 8601 format)',
    example: '1985-05-15',
  })
  @IsNotEmpty({ message: 'Date of birth is required' })
  @IsISO8601({ strict: true }, { message: 'Date of birth must be in ISO 8601 format (YYYY-MM-DD)' })
  dateOfBirth: string;

  @ApiProperty({
    description: 'Guardian email address',
    example: 'juan.delacruz@gmail.com',
  })
  @IsNotEmpty({ message: 'Email is required' })
  @Transform(({ value }) => value?.toLowerCase().trim())
  @IsEmail({}, { message: 'Invalid email format' })
  @MaxLength(100, { message: 'Email must not exceed 100 characters' })
  email: string;

  @ApiProperty({
    description: 'Guardian password',
    example: 'SecurePass123',
    minLength: 6,
    maxLength: 50,
  })
  @IsNotEmpty({ message: 'Password is required' })
  @IsString({ message: 'Password must be a string' })
  @MinLength(6, { message: 'Password must be at least 6 characters' })
  @MaxLength(50, { message: 'Password must not exceed 50 characters' })
  password: string;

  @ApiProperty({
    description: 'Guardian phone number (Philippine format: 10 digits starting with 9)',
    example: '9171234567',
  })
  @IsNotEmpty({ message: 'Contact number is required' })
  @IsString({ message: 'Contact number must be a string' })
  @Matches(/^9\d{9}$/, {
    message: 'Contact number must be 10 digits starting with 9 (e.g., 9171234567)',
  })
  @Transform(({ value }) => value?.replace(/[\s()-]/g, ''))
  contactNumber: string;

  @ApiPropertyOptional({
    description: 'Alternate phone number',
    example: '9181234567',
  })
  @IsOptional()
  @IsString({ message: 'Alternate number must be a string' })
  @Matches(/^9\d{9}$/, {
    message: 'Alternate number must be 10 digits starting with 9 (e.g., 9181234567)',
  })
  @Transform(({ value }) => value?.replace(/[\s()-]/g, ''))
  alternateNumber?: string;

  @ApiPropertyOptional({
    description: 'Guardian residential address',
    example: '123 Main St, City, State',
    maxLength: 500,
  })
  @IsOptional()
  @IsString({ message: 'Address must be a string' })
  @MaxLength(500, { message: 'Address must not exceed 500 characters' })
  @Transform(({ value }) => value?.trim())
  address?: string;

  @ApiPropertyOptional({
    description: 'Guardian occupation',
    example: 'Software Engineer',
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'Occupation must be a string' })
  @MaxLength(100, { message: 'Occupation must not exceed 100 characters' })
  @Transform(({ value }) => value?.trim())
  occupation?: string;
}

export class AddStudentDto {
  @ApiPropertyOptional({
    description: 'Student ID (UUID)',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Student ID must be a valid UUID v4' })
  studentId?: string;

  @ApiPropertyOptional({
    description: 'Student code/number',
    example: 'STU-2024-001',
    pattern: '^[A-Z0-9-]+$',
  })
  @IsOptional()
  @IsString({ message: 'Student code must be a string' })
  @Matches(/^[A-Z0-9-]+$/, {
    message: 'Student code must contain only uppercase letters, numbers, and hyphens',
  })
  @MinLength(3, { message: 'Student code must be at least 3 characters' })
  @MaxLength(50, { message: 'Student code must not exceed 50 characters' })
  @Transform(({ value }) => value?.toUpperCase().trim())
  studentCode?: string;

  @ApiPropertyOptional({
    description: 'Relationship to the student',
    enum: RelationshipType,
    example: RelationshipType.FATHER,
  })
  @IsOptional()
  @IsEnum(RelationshipType, {
    message: 'Relationship must be one of: Father, Mother, Guardian, Grandfather, Grandmother, Uncle, Aunt, Sibling, Other',
  })
  relationship?: RelationshipType;
}

export class UpdateProfileDto {
  @ApiPropertyOptional({
    description: 'Guardian first name',
    example: 'John',
    minLength: 2,
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'First name must be a string' })
  @MinLength(2, { message: 'First name must be at least 2 characters' })
  @MaxLength(100, { message: 'First name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'First name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  firstName?: string;

  @ApiPropertyOptional({
    description: 'Guardian last name',
    example: 'Doe',
    minLength: 2,
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'Last name must be a string' })
  @MinLength(2, { message: 'Last name must be at least 2 characters' })
  @MaxLength(100, { message: 'Last name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'Last name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  lastName?: string;

  @ApiPropertyOptional({
    description: 'Guardian middle name',
    example: 'Michael',
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'Middle name must be a string' })
  @MaxLength(100, { message: 'Middle name must not exceed 100 characters' })
  @Matches(/^[a-zA-Z\s-']+$/, {
    message: 'Middle name can only contain letters, spaces, hyphens, and apostrophes',
  })
  @Transform(({ value }) => value?.trim())
  middleName?: string;

  @ApiPropertyOptional({
    description: 'Guardian email address',
    example: 'parent@example.com',
  })
  @IsOptional()
  @Transform(({ value }) => value?.toLowerCase().trim())
  @IsEmail({}, { message: 'Invalid email format' })
  @MaxLength(100, { message: 'Email must not exceed 100 characters' })
  email?: string;

  @ApiPropertyOptional({
    description: 'Guardian phone number',
    example: '+1234567890',
  })
  @IsOptional()
  @IsString({ message: 'Phone number must be a string' })
  @Matches(/^[+]?[(]?[0-9]{1,3}[)]?[-\s\.]?[(]?[0-9]{1,3}[)]?[-\s\.]?[0-9]{4,9}$/, {
    message: 'Invalid phone number format',
  })
  @Transform(({ value }) => value?.replace(/[\s()-]/g, ''))
  phoneNumber?: string;

  @ApiPropertyOptional({
    description: 'Guardian residential address',
    example: '123 Main St, City, State 12345',
    maxLength: 500,
  })
  @IsOptional()
  @IsString({ message: 'Address must be a string' })
  @MaxLength(500, { message: 'Address must not exceed 500 characters' })
  @Transform(({ value }) => value?.trim())
  address?: string;

  @ApiPropertyOptional({
    description: 'Guardian occupation',
    example: 'Software Engineer',
    maxLength: 100,
  })
  @IsOptional()
  @IsString({ message: 'Occupation must be a string' })
  @MaxLength(100, { message: 'Occupation must not exceed 100 characters' })
  @Transform(({ value }) => value?.trim())
  occupation?: string;

  @ApiPropertyOptional({
    description: 'Preferred language for notifications',
    example: 'en',
    default: 'en',
  })
  @IsOptional()
  @IsString({ message: 'Language must be a string' })
  @IsIn(['en', 'es', 'fr', 'de', 'zh', 'ja', 'ko', 'ar'], {
    message: 'Unsupported language. Supported: en, es, fr, de, zh, ja, ko, ar',
  })
  preferredLanguage?: string;
}

export class GetAttendanceLogsDto {
  @ApiPropertyOptional({
    description: 'Filter by specific student ID',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Student ID must be a valid UUID v4' })
  studentId?: string;

  @ApiPropertyOptional({
    description: 'Maximum number of records to return',
    minimum: 1,
    maximum: 100,
    default: 50,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Limit must be a number' })
  @Min(1, { message: 'Limit must be at least 1' })
  @Max(100, { message: 'Limit cannot exceed 100' })
  limit?: number = 50;

  @ApiPropertyOptional({
    description: 'Number of records to skip',
    minimum: 0,
    default: 0,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Offset must be a number' })
  @Min(0, { message: 'Offset cannot be negative' })
  offset?: number = 0;

  @ApiPropertyOptional({
    description: 'Number of days to look back',
    minimum: 1,
    maximum: 90,
    default: 7,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Days must be a number' })
  @Min(1, { message: 'Days must be at least 1' })
  @Max(90, { message: 'Days cannot exceed 90' })
  days?: number = 7;

  @ApiPropertyOptional({
    description: 'Start date for filtering (ISO 8601 format)',
    example: '2024-01-01T00:00:00.000Z',
  })
  @IsOptional()
  @IsISO8601({ strict: true }, { message: 'Start date must be in ISO 8601 format' })
  startDate?: string;

  @ApiPropertyOptional({
    description: 'End date for filtering (ISO 8601 format)',
    example: '2024-12-31T23:59:59.999Z',
  })
  @IsOptional()
  @IsISO8601({ strict: true }, { message: 'End date must be in ISO 8601 format' })
  endDate?: string;

  @ApiPropertyOptional({
    description: 'Type of attendance log to filter',
    enum: AttendanceLogType,
    default: AttendanceLogType.ALL,
  })
  @IsOptional()
  @IsEnum(AttendanceLogType, {
    message: 'Type must be check-in, check-out, or all',
  })
  type?: AttendanceLogType = AttendanceLogType.ALL;
}

export class MarkNotificationsReadDto {
  @ApiProperty({
    description: 'Array of notification IDs to mark as read',
    type: [String],
    example: [
      '550e8400-e29b-41d4-a716-446655440000',
      '550e8400-e29b-41d4-a716-446655440001',
    ],
  })
  @IsArray({ message: 'Notification IDs must be an array' })
  @ArrayMinSize(1, { message: 'At least one notification ID is required' })
  @ArrayMaxSize(100, { message: 'Cannot mark more than 100 notifications at once' })
  @IsUUID('4', { each: true, message: 'Each notification ID must be a valid UUID v4' })
  notificationIds: string[];
}

export class GetNotificationsDto {
  @ApiPropertyOptional({
    description: 'Maximum number of notifications to return',
    minimum: 1,
    maximum: 100,
    default: 50,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Limit must be a number' })
  @Min(1, { message: 'Limit must be at least 1' })
  @Max(100, { message: 'Limit cannot exceed 100' })
  limit?: number = 50;

  @ApiPropertyOptional({
    description: 'Number of notifications to skip',
    minimum: 0,
    default: 0,
  })
  @IsOptional()
  @Type(() => Number)
  @IsNumber({}, { message: 'Offset must be a number' })
  @Min(0, { message: 'Offset cannot be negative' })
  offset?: number = 0;

  @ApiPropertyOptional({
    description: 'Type of notifications to filter',
    enum: NotificationType,
    default: NotificationType.ALL,
  })
  @IsOptional()
  @IsEnum(NotificationType, {
    message: 'Type must be attendance, announcement, emergency, reminder, or all',
  })
  type?: NotificationType = NotificationType.ALL;

  @ApiPropertyOptional({
    description: 'Filter to show only unread notifications',
    default: false,
  })
  @IsOptional()
  @Transform(({ value }) => {
    if (typeof value === 'string') {
      return value.toLowerCase() === 'true';
    }
    return Boolean(value);
  })
  @IsBoolean({ message: 'unreadOnly must be a boolean' })
  unreadOnly?: boolean = false;

  @ApiPropertyOptional({
    description: 'Filter by specific student ID',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Student ID must be a valid UUID v4' })
  studentId?: string;

  @ApiPropertyOptional({
    description: 'Filter by notification priority',
    enum: NotificationPriority,
  })
  @IsOptional()
  @IsEnum(NotificationPriority, {
    message: 'Priority must be low, medium, high, or urgent',
  })
  priority?: NotificationPriority;
}

// Additional validation DTOs
export class UpdateDeviceTokenDto {
  @ApiProperty({
    description: 'FCM/APNs token for push notifications',
    example: 'fcm_token_example_123',
  })
  @IsNotEmpty({ message: 'Device token is required' })
  @IsString({ message: 'Device token must be a string' })
  @MaxLength(255, { message: 'Device token must not exceed 255 characters' })
  deviceToken: string;

  @ApiProperty({
    description: 'Platform for notification handling',
    enum: PlatformType,
    example: PlatformType.IOS,
  })
  @IsEnum(PlatformType, { message: 'Platform must be ios, android, or web' })
  platform: PlatformType;

  @ApiPropertyOptional({
    description: 'Unique device identifier',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsOptional()
  @IsUUID('4', { message: 'Device ID must be a valid UUID v4' })
  deviceId?: string;
}

export class RemoveStudentDto {
  @ApiProperty({
    description: 'Student ID to remove from guardian',
    example: '550e8400-e29b-41d4-a716-446655440000',
  })
  @IsNotEmpty({ message: 'Student ID is required' })
  @IsUUID('4', { message: 'Student ID must be a valid UUID v4' })
  studentId: string;
}

export class ChangePasswordDto {
  @ApiProperty({
    description: 'Current password',
    example: 'CurrentPass123',
  })
  @IsNotEmpty({ message: 'Current password is required' })
  @IsString({ message: 'Current password must be a string' })
  currentPassword: string;

  @ApiProperty({
    description: 'New password',
    example: 'NewSecurePass456',
    minLength: 6,
    maxLength: 50,
  })
  @IsNotEmpty({ message: 'New password is required' })
  @IsString({ message: 'New password must be a string' })
  @MinLength(6, { message: 'New password must be at least 6 characters' })
  @MaxLength(50, { message: 'New password must not exceed 50 characters' })
  @Matches(
    /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{6,}$/,
    {
      message:
        'Password must contain at least one uppercase letter, one lowercase letter, and one number',
    },
  )
  newPassword: string;

  @ApiProperty({
    description: 'Confirm new password',
    example: 'NewSecurePass456',
  })
  @IsNotEmpty({ message: 'Password confirmation is required' })
  @IsString({ message: 'Password confirmation must be a string' })
  confirmPassword: string;
}

export class UpdateNotificationPreferencesDto {
  @ApiPropertyOptional({
    description: 'Enable attendance notifications',
    default: true,
  })
  @IsOptional()
  @IsBoolean({ message: 'Attendance notifications setting must be a boolean' })
  attendanceNotifications?: boolean;

  @ApiPropertyOptional({
    description: 'Enable announcement notifications',
    default: true,
  })
  @IsOptional()
  @IsBoolean({ message: 'Announcement notifications setting must be a boolean' })
  announcementNotifications?: boolean;

  @ApiPropertyOptional({
    description: 'Enable emergency notifications',
    default: true,
  })
  @IsOptional()
  @IsBoolean({ message: 'Emergency notifications setting must be a boolean' })
  emergencyNotifications?: boolean;

  @ApiPropertyOptional({
    description: 'Enable reminder notifications',
    default: true,
  })
  @IsOptional()
  @IsBoolean({ message: 'Reminder notifications setting must be a boolean' })
  reminderNotifications?: boolean;

  @ApiPropertyOptional({
    description: 'Quiet hours start time (HH:mm format)',
    example: '22:00',
  })
  @IsOptional()
  @Matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, {
    message: 'Quiet hours start must be in HH:mm format',
  })
  quietHoursStart?: string;

  @ApiPropertyOptional({
    description: 'Quiet hours end time (HH:mm format)',
    example: '07:00',
  })
  @IsOptional()
  @Matches(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, {
    message: 'Quiet hours end must be in HH:mm format',
  })
  quietHoursEnd?: string;
}

// Response DTOs
export class GuardianLoginResponseDto {
  token: string;
  guardian: {
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phoneNumber?: string;
  };
  students: StudentFullInfoDto[];
  permissions?: string[];
  expiresIn?: never; // Token doesn't expire
}

export enum AttendanceStatus {
  IN_SCHOOL = 'in-school',
  OUT_OF_SCHOOL = 'out-of-school',
  UNKNOWN = 'unknown',
}

export class AttendanceEventDto {
  @ApiProperty({ description: 'Event timestamp', example: '2024-01-01T08:00:00.000Z' })
  timestamp: string;

  @ApiProperty({ description: 'Gate name', example: 'Main Gate' })
  gate: string;

  @ApiPropertyOptional({ description: 'Gate ID' })
  gateId?: string;

  @ApiPropertyOptional({ description: 'Photo URL if available' })
  photo?: string;
}

export class TodayAttendanceDto {
  @ApiProperty({ description: 'Number of check-ins today' })
  checkIns: number;

  @ApiProperty({ description: 'Number of check-outs today' })
  checkOuts: number;

  @ApiPropertyOptional({ description: 'Total time in school (HH:mm format)' })
  totalTime?: string;

  @ApiPropertyOptional({ description: 'First check-in time' })
  firstCheckIn?: string;

  @ApiPropertyOptional({ description: 'Last check-out time' })
  lastCheckOut?: string;
}

export class StudentAttendanceStatusDto {
  @ApiProperty({ description: 'Student ID' })
  studentId: string;

  @ApiProperty({ description: 'Student full name' })
  studentName: string;

  @ApiProperty({ description: 'Student code' })
  studentCode: string;

  @ApiProperty({ description: 'Current attendance status', enum: AttendanceStatus })
  status: AttendanceStatus;

  @ApiPropertyOptional({ description: 'Student photo URL' })
  photoUrl?: string;

  @ApiPropertyOptional({ description: 'Last check-in details', type: AttendanceEventDto })
  lastCheckIn?: AttendanceEventDto;

  @ApiPropertyOptional({ description: 'Last check-out details', type: AttendanceEventDto })
  lastCheckOut?: AttendanceEventDto;

  @ApiProperty({ description: "Today's attendance summary", type: TodayAttendanceDto })
  todayAttendance: TodayAttendanceDto;
}

export class GateInfoDto {
  @ApiProperty({ description: 'Gate ID' })
  id: string;

  @ApiProperty({ description: 'Gate name' })
  name: string;
}

export class AttendanceLogDto {
  @ApiProperty({ description: 'Log ID' })
  id: string;

  @ApiProperty({ description: 'Student ID' })
  studentId: string;

  @ApiProperty({ description: 'Student full name' })
  studentName: string;

  @ApiProperty({ description: 'Log type', enum: ['check-in', 'check-out'] })
  type: 'check-in' | 'check-out';

  @ApiProperty({ description: 'Timestamp in ISO format' })
  timestamp: string;

  @ApiProperty({ description: 'Gate information', type: GateInfoDto })
  gate: GateInfoDto;

  @ApiPropertyOptional({ description: 'Photo URL if available' })
  photo?: string;

  @ApiPropertyOptional({ description: 'Device ID that recorded the log' })
  deviceId?: string;

  @ApiPropertyOptional({ description: 'Additional metadata' })
  metadata?: Record<string, any>;
}

export class NotificationDto {
  @ApiProperty({ description: 'Notification ID' })
  id: string;

  @ApiProperty({
    description: 'Notification type',
    enum: NotificationType,
  })
  type: NotificationType;

  @ApiProperty({ description: 'Notification title' })
  title: string;

  @ApiProperty({ description: 'Notification message' })
  message: string;

  @ApiProperty({ description: 'Timestamp in ISO format' })
  timestamp: string;

  @ApiProperty({ description: 'Read status' })
  isRead: boolean;

  @ApiProperty({
    description: 'Notification priority',
    enum: NotificationPriority,
  })
  priority: NotificationPriority;

  @ApiPropertyOptional({ description: 'Additional notification data' })
  data?: Record<string, any>;

  @ApiPropertyOptional({ description: 'Related student ID' })
  studentId?: string;

  @ApiPropertyOptional({ description: 'Related student name' })
  studentName?: string;

  @ApiPropertyOptional({ description: 'Action URL or deeplink' })
  actionUrl?: string;

  @ApiPropertyOptional({ description: 'Notification icon type' })
  iconType?: string;
}

export class GradeLevelInfoDto {
  @ApiProperty({ description: 'Grade level ID' })
  id: number;

  @ApiProperty({ description: 'Grade level code' })
  code: string;

  @ApiProperty({ description: 'Grade level name' })
  name: string;

  @ApiProperty({ description: 'Education level' })
  educationLevel: string;
}

export class SectionInfoDto {
  @ApiProperty({ description: 'Section ID' })
  id: string;

  @ApiProperty({ description: 'Section name' })
  name: string;

  @ApiProperty({ description: 'Grade level ID' })
  gradeLevelId: number;

  @ApiProperty({ description: 'Grade level info', type: GradeLevelInfoDto })
  gradeLevel: GradeLevelInfoDto | null;

  @ApiProperty({ description: 'Adviser name' })
  adviserName: string;

  @ApiProperty({ description: 'School year' })
  schoolYear: string;

  @ApiPropertyOptional({ description: 'Section capacity' })
  capacity?: number;
}

export class FileInfoDto {
  @ApiProperty({ description: 'File ID' })
  id: string;

  @ApiProperty({ description: 'File URL' })
  url: string;

  @ApiProperty({ description: 'File name' })
  name: string;

  @ApiPropertyOptional({ description: 'File size' })
  size?: number;

  @ApiPropertyOptional({ description: 'File type' })
  type?: string;
}

export class GuardianInfoDto {
  @ApiProperty({ description: 'Guardian ID' })
  id: string;

  @ApiProperty({ description: 'Guardian name' })
  name: string;

  @ApiProperty({ description: 'Guardian email' })
  email: string;

  @ApiProperty({ description: 'Guardian contact number' })
  contactNumber: string;

  @ApiProperty({ description: 'Relationship to student' })
  relationship: string;
}

export class StudentInfoDto {
  @ApiProperty({ description: 'Student ID' })
  id: string;

  @ApiProperty({ description: 'Student first name' })
  firstName: string;

  @ApiProperty({ description: 'Student last name' })
  lastName: string;

  @ApiPropertyOptional({ description: 'Student middle name' })
  middleName?: string;

  @ApiProperty({ description: 'Student code' })
  studentCode: string;

  @ApiPropertyOptional({ description: 'Student section/class' })
  section?: string;

  @ApiPropertyOptional({ description: 'Grade level' })
  gradeLevel?: string;

  @ApiPropertyOptional({
    description: 'Relationship to guardian',
    enum: RelationshipType,
  })
  relationship?: RelationshipType;

  @ApiPropertyOptional({ description: 'Student photo URL' })
  photoUrl?: string;

  @ApiPropertyOptional({ description: 'Is primary guardian' })
  isPrimary?: boolean;
}

export class StudentFullInfoDto {
  @ApiProperty({ description: 'Student ID' })
  id: string;

  @ApiProperty({ description: 'Student number/code' })
  studentNumber: string;

  @ApiProperty({ description: 'Student first name' })
  firstName: string;

  @ApiProperty({ description: 'Student last name' })
  lastName: string;

  @ApiPropertyOptional({ description: 'Student middle name' })
  middleName?: string;

  @ApiProperty({ description: 'Date of birth' })
  dateOfBirth: string;

  @ApiProperty({ description: 'Gender' })
  gender: string;

  @ApiPropertyOptional({ description: 'Section information', type: SectionInfoDto })
  section?: SectionInfoDto;

  @ApiPropertyOptional({ description: 'Learner Reference Number (LRN)' })
  lrn?: string;

  @ApiPropertyOptional({ description: 'Profile photo', type: FileInfoDto })
  profilePhoto?: FileInfoDto;

  @ApiProperty({ description: 'Date registered' })
  dateRegistered: string;

  @ApiProperty({ description: 'Active status' })
  isActive: boolean;

  @ApiPropertyOptional({ description: 'Guardian information', type: GuardianInfoDto })
  guardian?: GuardianInfoDto;

  @ApiPropertyOptional({ description: 'Temporary guardian name' })
  temporaryGuardianName?: string;

  @ApiPropertyOptional({ description: 'Temporary guardian address' })
  temporaryGuardianAddress?: string;

  @ApiPropertyOptional({ description: 'Temporary guardian contact number' })
  temporaryGuardianContactNumber?: string;

  @ApiProperty({ description: 'Created timestamp' })
  createdAt: string;

  @ApiProperty({ description: 'Updated timestamp' })
  updatedAt: string;

  @ApiPropertyOptional({
    description: 'Relationship to guardian',
    enum: RelationshipType,
  })
  relationship?: RelationshipType;

  @ApiPropertyOptional({ description: 'Is primary guardian' })
  isPrimary?: boolean;
}

export class GuardianProfileDto {
  @ApiProperty({ description: 'Guardian ID' })
  id: string;

  @ApiProperty({ description: 'Guardian first name' })
  firstName: string;

  @ApiProperty({ description: 'Guardian last name' })
  lastName: string;

  @ApiPropertyOptional({ description: 'Guardian middle name' })
  middleName?: string;

  @ApiProperty({ description: 'Guardian email' })
  email: string;

  @ApiPropertyOptional({ description: 'Guardian phone number' })
  phoneNumber?: string;

  @ApiPropertyOptional({ description: 'Guardian address' })
  address?: string;

  @ApiPropertyOptional({ description: 'Guardian occupation' })
  occupation?: string;

  @ApiProperty({ description: 'Account active status' })
  isActive: boolean;

  @ApiProperty({ description: 'Account creation date' })
  createdAt: string;

  @ApiPropertyOptional({ description: 'Last login timestamp' })
  lastLogin?: string;

  @ApiPropertyOptional({ description: 'Last mobile app login timestamp' })
  lastAppLogin?: string;

  @ApiPropertyOptional({ description: 'Preferred language' })
  preferredLanguage?: string;

  @ApiPropertyOptional({ description: 'App version' })
  appVersion?: string;

  @ApiPropertyOptional({ description: 'Notification preferences' })
  notificationPreferences?: Record<string, any>;

  @ApiProperty({
    description: 'List of associated students',
    type: [StudentFullInfoDto],
  })
  students: StudentFullInfoDto[];

  @ApiPropertyOptional({ description: 'Active device tokens count' })
  activeDevices?: number;
}