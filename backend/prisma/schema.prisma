generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model PurchaseOrder {
  id                   Int                    @id @default(autoincrement())
  itemReceiptId        Int
  balance              Float                  @default(0)
  isOpen               Boolean                @default(true)
  purchaseRequestId    Int?
  itemReceipt          ItemReceipt            @relation(fields: [itemReceiptId], references: [id], onDelete: Cascade)
  PurchaseRequest      PurchaseRequest?       @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  PurchaseOrderPayment PurchaseOrderPayment[]
  RequestForPayment    RequestForPayment[]
}

model PurchaseOrderPayment {
  id              Int           @id @default(autoincrement())
  purchaseOrderId Int
  fundAccountId   Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  amount          Float
  fee             Float         @default(0)
  fundAccount     FundAccount   @relation(fields: [fundAccountId], references: [id], onDelete: Cascade)
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model PurchaseRequest {
  id                               Int                                @id @default(autoincrement())
  itemReceiptId                    Int
  status                           PurchaseRequestStatus
  deliveryDate                     DateTime                           @default(now())
  EquipmentPartsMaintenanceHistory EquipmentPartsMaintenanceHistory[]
  PurchaseOrder                    PurchaseOrder[]
  itemReceipt                      ItemReceipt                        @relation(fields: [itemReceiptId], references: [id], onDelete: Cascade)
  PurchaseRequestSuppliers         PurchaseRequestSuppliers[]
}

model PurchaseRequestSuppliers {
  id                Int             @id @default(autoincrement())
  purchaseRequestId Int
  supplierId        Int
  paymentTerms      PaymentTerms    @default(NO_PAYMENT_TERMS)
  deliveryTerms     DeliveryTerms   @default(DELIVERY)
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
  supplier          Supplier        @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([purchaseRequestId, supplierId])
}

model Account {
  id                                     String                             @id @unique @default(uuid())
  email                                  String                             @unique @db.VarChar(100)
  firstName                              String                             @db.VarChar(100)
  lastName                               String                             @db.VarChar(100)
  contactNumber                          String                             @db.VarChar(100)
  username                               String                             @db.VarChar(100)
  password                               String?                            @db.VarChar(200)
  key                                    Bytes?
  createdAt                              DateTime                           @default(now())
  updatedAt                              DateTime                           @updatedAt
  roleId                                 String
  isDeleted                              Boolean                            @default(false)
  parentAccountId                        String?
  image                                  String?                            @default("/images/person01.webp")
  status                                 Status                             @default(FLOATING)
  pettyCashAmount                        Int                                @default(0)
  middleName                             String                             @default("") @db.VarChar(100)
  companyId                              Int?
  phone                                  String?                            @db.VarChar(20)
  isDeveloper                            Boolean                            @default(false)
  searchKeyword                          String?                            @db.VarChar(500)
  sourceUrl                              String?                            @db.VarChar(500)
  accountType                            AccountType                        @default(STAFF)
  dateOfBirth                            DateTime?
  gender                                 String?                            @db.VarChar(20)
  lastLogin                              DateTime?
  emailVerificationExpiry                DateTime?
  emailVerificationToken                 String?                            @db.VarChar(100)
  isEmailVerified                        Boolean                            @default(false)
  isInviteAccepted                       Boolean                            @default(true)
  city                                   String?                            @db.VarChar(100)
  civilStatus                            String?                            @db.VarChar(20)
  country                                String?                            @db.VarChar(100)
  postalCode                             String?                            @db.VarChar(20)
  stateProvince                          String?                            @db.VarChar(100)
  street                                 String?                            @db.VarChar(200)
  zipCode                                String?                            @db.VarChar(20)
  authProvider                           AuthProvider                       @default(LOCAL)
  googleId                               String?                            @unique @db.VarChar(255)
  facebookId                             String?                            @unique @db.VarChar(255)
  facebookEmail                          String?                            @db.VarChar(255)
  googleEmail                            String?                            @db.VarChar(255)
  passwordHash                           String?                            @db.VarChar(255)
  supabaseUserId                         String?                            @unique @db.VarChar(255)
  supabaseEmail                          String?                            @db.VarChar(255)
  company                                Company?                           @relation(fields: [companyId], references: [id])
  parent                                 Account?                           @relation("AccountHierarchy", fields: [parentAccountId], references: [id], onDelete: Cascade)
  children                               Account[]                          @relation("AccountHierarchy")
  role                                   Role                               @relation(fields: [roleId], references: [id], onDelete: Cascade)
  invite                                 AccountInvite?                     @relation("AccountInvite")
  invitesSent                            AccountInvite[]                    @relation("InvitesSent")
  invitedChildren                        AccountInvite[]                    @relation("InvitedChildren")
  TaskProjectNotifications               AccountNotifications[]
  TaskProjectNotificationsSender         AccountNotifications[]             @relation("SenderNotifications")
  accountToken                           AccountToken[]
  AllowanceImportBatch                   AllowanceImportBatch[]
  AllowancePlan                          AllowancePlan[]
  createdAnnouncements                   Announcement[]
  acknowledgedAnnouncements              AnnouncementAcknowledgment[]
  viewedAnnouncements                    AnnouncementView[]
  AttendanceConflict                     AttendanceConflict[]
  AttendanceConflictIgnore               AttendanceConflictIgnore[]
  createdBOQs                            BillOfQuantity[]                   @relation("CreatedBOQs")
  updatedBOQs                            BillOfQuantity[]                   @relation("UpdatedBOQs")
  BranchTimekeepingStatus                BranchTimekeepingStatus[]
  Collection                             Collection[]                       @relation("CreatedBy")
  Conversation                           Conversation?
  crmActivitiesPerformed                 CRMActivity[]                      @relation("CRMActivityPerformedBy")
  dealSourcesCreated                     DealSource[]                       @relation("DealSourceCreatedBy")
  dealTypesCreated                       DealType[]                         @relation("DealTypeCreatedBy")
  DeductionImportBatch                   DeductionImportBatch[]
  DeductionPlan                          DeductionPlan[]
  DiscussionMessage                      DiscussionMessage[]
  DiscussionMessageRead                  DiscussionMessageRead[]
  DiscussionWatchers                     DiscussionWatchers[]
  EmailApprovalToken                     EmailApprovalToken[]
  EmailConfiguration                     EmailConfiguration?
  EmployeeContract                       EmployeeContract[]
  EmployeeData                           EmployeeData?
  EmployeeImportBatch                    EmployeeImportBatch[]
  EmployeeSalaryAdjustment               EmployeeSalaryAdjustment[]
  EmployeeTimekeepingCutoff              EmployeeTimekeepingCutoff[]
  EmployeeTimekeepingRaw                 EmployeeTimekeepingRaw[]
  EquipmentPartsMaintenanceHistoryCheck  EquipmentPartsMaintenanceHistory[] @relation("CheckedByRelation")
  EquipmentPartsMaintenanceHistoryRepair EquipmentPartsMaintenanceHistory[] @relation("RepairedByRelation")
  Files                                  Files[]
  GovernmentPaymentHistory               GovernmentPaymentHistory[]
  individualScheduleAssignments          IndividualScheduleAssignment[]     @relation("IndividualScheduleAssignments")
  updatedIndividualSchedules             IndividualScheduleAssignment[]     @relation("UpdatedIndividualSchedules")
  leadDealsCreated                       LeadDeal[]                         @relation("LeadDealCreatedBy")
  leadDealsAsRelationshipOwner           LeadDeal[]                         @relation("LeadDealRelationshipOwner")
  leadRelationshipOwner                  LeadRelationshipOwner?
  leadRelationshipOwnersCreated          LeadRelationshipOwner[]            @relation("LeadRelationshipOwnerCreatedBy")
  OTPVerification                        OTPVerification[]
  PayrollApprovalHistory                 PayrollApprovalHistory[]
  PayrollApprovers                       PayrollApprovers[]
  filings                                PayrollFiling[]                    @relation("FilingAccount")
  filingsApproved                        PayrollFiling[]                    @relation("FilingApprovedBy")
  PettyCashHolders                       PettyCashHolder[]
  PettyCashLiquidationApprovedBy         PettyCashLiquidation[]             @relation("ApprovedByRelation")
  PettyCashLiquidationRequestedBy        PettyCashLiquidation[]             @relation("RequestedByRelation")
  PettyCashTransactionPerformed          PettyCashTransaction[]
  PettyCashTransactions                  PettyCashTransactions[]
  pointsOfContactCreated                 PointOfContact[]                   @relation("PointOfContactCreatedBy")
  projectsInCharge                       Project[]                          @relation("ProjectPersonInCharge")
  projectsAsRelationshipOwner            Project[]                          @relation("ProjectRelationshipOwner")
  ProjectAccomplishment                  ProjectAccomplishment[]            @relation("ReviewedBy")
  RequestForPaymentActions               RequestForPaymentActions[]
  SentEmail                              SentEmail[]
  SupplierPriceUpdate                    SupplierPriceUpdate[]
  assignedTask                           Task[]                             @relation("AssignedTo")
  tasks                                  Task[]                             @relation("CreatedBy")
  updatedTasks                           Task[]                             @relation("UpdatedBy")
  TaskWatcher                            TaskWatcher[]
  TaskOrderContext                       TaskOrderContext[]
  teamMembership                         TeamMember?
  updatedTeamSchedules                   TeamScheduleAssignment[]           @relation("UpdatedTeamSchedules")
  TimekeepingImportBatch                 TimekeepingImportBatch[]
  performedWorkflowHistory               WorkflowHistory[]                  @relation("WorkflowHistoryPerformer")
  startedWorkflowInstances               WorkflowInstance[]                 @relation("WorkflowStartedBy")
  deletedWorkflowTemplates               WorkflowTemplate[]                 @relation("WorkflowTemplateDeletedBy")
  oauthCodes                             OAuthCode[]
  oauthTokens                            OAuthToken[]
  createdCalendarEvents                  CalendarEvent[]                    @relation("EventCreator")
  calendarEventAttendee                  CalendarEventAttendee[]            @relation("EventAttendee")
  createdCalendarCategories              CalendarCategory[]                 @relation("CategoryCreator")
  uploadedEventAttachments               CalendarEventAttachment[]          @relation("EventAttachmentUploader")

  @@index([firstName])
  @@index([lastName])
  @@index([companyId])
  @@index([firstName, lastName])
  @@index([googleId])
  @@index([companyId], map: "idx_account_company")
  @@index([supabaseUserId], map: "idx_account_supabase_user")
}

model AccountToken {
  sessionId            String   @id @unique @default(uuid())
  accountId            String
  payload              String
  userAgent            String
  token                String   @db.VarChar(100)
  ipAddress            String   @db.VarChar(200)
  status               String   @db.VarChar(50)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  supabaseAccessToken  String?
  supabaseRefreshToken String?
  account              Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model EmailConfiguration {
  id             String        @id @unique @default(uuid())
  accountId      String        @unique
  emailProvider  EmailProvider @default(CUSTOM)
  emailProtocol  EmailProtocol
  incomingServer String
  incomingPort   Int
  incomingSSL    Boolean       @default(true)
  outgoingServer String
  outgoingPort   Int
  outgoingSSL    Boolean       @default(true)
  emailAddress   String
  emailPassword  String
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  emails         Email[]
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Email {
  id             String             @id @unique @default(uuid())
  emailConfigId  String
  messageId      String?
  folder         String             @default("INBOX")
  subject        String
  fromName       String
  fromEmail      String
  toEmails       Json
  ccEmails       Json?
  bccEmails      Json?
  preview        String?
  textContent    String?
  htmlContent    String?
  receivedAt     DateTime
  isRead         Boolean            @default(false)
  isStarred      Boolean            @default(false)
  hasAttachments Boolean            @default(false)
  size           Int?
  uid            String?
  flags          Json?
  synced         Boolean            @default(false)
  lastSyncedAt   DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  emailConfig    EmailConfiguration @relation(fields: [emailConfigId], references: [id], onDelete: Cascade)
  attachments    EmailAttachment[]

  @@unique([emailConfigId, messageId])
  @@index([emailConfigId, folder])
  @@index([emailConfigId, receivedAt])
  @@index([emailConfigId, isRead])
}

model EmailAttachment {
  id               String    @id @unique @default(uuid())
  emailId          String
  filename         String
  originalFilename String?
  contentType      String
  size             Int
  s3Key            String
  s3Url            String
  downloadCount    Int       @default(0)
  lastDownloadAt   DateTime?
  createdAt        DateTime  @default(now())
  email            Email     @relation(fields: [emailId], references: [id], onDelete: Cascade)

  @@index([emailId])
}

model RoleGroup {
  id          String   @id @unique @default(uuid())
  name        String
  description String
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]
  Task        Task[]   @relation("RoleGroup")
}

model Role {
  id             String          @id @unique @default(uuid())
  name           String
  description    String
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  isDeveloper    Boolean         @default(false)
  level          Int             @default(0)
  roleGroupId    String?
  parentRoleId   String?
  isFullAccess   Boolean         @default(false)
  companyId      Int?
  department     String?
  users          Account[]
  accountInvites AccountInvite[]
  company        Company?        @relation(fields: [companyId], references: [id])
  parentRole     Role?           @relation("RoleHierarchy", fields: [parentRoleId], references: [id], onDelete: Cascade)
  childRoles     Role[]          @relation("RoleHierarchy")
  roleGroup      RoleGroup?      @relation(fields: [roleGroupId], references: [id], onDelete: Cascade)
  RoleUserLevel  RoleUserLevel[]
}

model RoleUserLevel {
  id          String    @id @unique @default(uuid())
  roleId      String
  userLevelId Int
  role        Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  userLevel   UserLevel @relation(fields: [userLevelId], references: [id], onDelete: Cascade)
}

model Client {
  contactNumber          String
  email                  String            @unique @db.VarChar(100)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  isDeleted              Boolean           @default(false)
  locationId             String
  name                   String
  id                     Int               @id @default(autoincrement())
  clientLogoId           Int?
  totalCollected         Float             @default(0)
  totalCollection        Float             @default(0)
  totalCollectionBalance Float             @default(0)
  totalProjectAmount     Float             @default(0)
  companyId              Int?
  clientLogo             Files?            @relation(fields: [clientLogoId], references: [id], onDelete: Cascade)
  company                Company?          @relation(fields: [companyId], references: [id])
  location               Location          @relation(fields: [locationId], references: [id], onDelete: Cascade)
  shareLinks             ClientShareLink[]
  projects               Project[]
}

model ClientShareLink {
  id         Int       @id @default(autoincrement())
  shortCode  String    @unique @db.VarChar(10)
  fullToken  String
  clientId   Int
  companyId  Int
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  usageCount Int       @default(0)
  lastUsedAt DateTime?
  client     Client    @relation(fields: [clientId], references: [id])
  company    Company   @relation(fields: [companyId], references: [id])
}

model Project {
  id                            Int                            @id @default(autoincrement())
  name                          String
  description                   String
  budget                        Float
  startDate                     DateTime
  endDate                       DateTime
  status                        ProjectStatus                  @default(PROJECT)
  isDeleted                     Boolean                        @default(false)
  isLead                        Boolean                        @default(false)
  leadBoardStage                String                         @default("opportunity")
  projectBoardStage             String                         @default("planning")
  locationId                    String
  clientId                      Int?
  createdAt                     DateTime                       @default(now())
  totalCollected                Float                          @default(0)
  totalCollection               Float                          @default(0)
  totalCollectionBalance        Float                          @default(0)
  downpaymentAmount             Float                          @default(0)
  retentionAmount               Float                          @default(0)
  progressPercentage            Float                          @default(0)
  isProjectStarted              Boolean                        @default(false)
  code                          String                         @default("")
  companyId                     Int?
  personInChargeId              String?
  winProbability                WinProbability                 @default(UNKNOWN)
  abc                           Float?
  clientEmailAddress            String?
  contactDetails                String?
  initialCosting                Float?
  leadSource                    String?
  leadType                      String?
  mmr                           Float?
  relationshipOwnerId           String?
  parentId                      Int?
  TaskProjectNotifications      AccountNotifications[]
  boqs                          BillOfQuantity[]
  BranchTimekeepingStatus       BranchTimekeepingStatus[]
  Collection                    Collection[]
  EmployeeData                  EmployeeData[]
  Files                         Files[]
  individualScheduleAssignments IndividualScheduleAssignment[]
  ItemReceipt                   ItemReceipt[]
  client                        Client?                        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  company                       Company?                       @relation(fields: [companyId], references: [id])
  location                      Location                       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  parent                        Project?                       @relation("BranchHierarchy", fields: [parentId], references: [id])
  children                      Project[]                      @relation("BranchHierarchy")
  personInCharge                Account?                       @relation("ProjectPersonInCharge", fields: [personInChargeId], references: [id])
  relationshipOwner             Account?                       @relation("ProjectRelationshipOwner", fields: [relationshipOwnerId], references: [id])
  projectAccomplishment         ProjectAccomplishment[]
  RequestForPayment             RequestForPayment[]
  Task                          Task[]
  TaskPhase                     TaskPhase[]
  teamScheduleAssignments       TeamScheduleAssignment[]
  warehouse                     Warehouse[]
  EmployeeTimekeepingRaw        EmployeeTimekeepingRaw[]
  ManpowerDevice                ManpowerDevice[]
}

model BoardLane {
  id          Int            @id @default(autoincrement())
  order       Int
  name        String         @unique
  description String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDeleted   Boolean        @default(false)
  isDefault   Boolean        @default(false)
  key         BoardLaneKeys?
  tasks       Task[]
}

model Task {
  id                      Int                  @id @default(autoincrement())
  order                   Int
  description             String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  isDeleted               Boolean              @default(false)
  boardLaneId             Int
  createdById             String
  projectId               Int?
  title                   String
  updatedById             String
  assignedToId            String?
  dueDate                 DateTime?
  isRead                  Boolean              @default(false)
  assignedByDifficultySet Int                  @default(0)
  assignedToDifficultySet Int                  @default(0)
  roleGroupdId            String?
  isSelfAssigned          Boolean              @default(false)
  assignMode              TaskAssignMode       @default(SELF)
  priorityLevel           Int                  @default(0)
  isOpen                  Boolean              @default(true)
  taskType                TaskType             @default(NORMAL)
  companyId               Int?
  taskPhaseId             Int?
  isDraft                 Boolean              @default(false)
  ApprovalMetadata        ApprovalMetadata?
  EmailApprovalToken      EmailApprovalToken[]
  Files                   Files[]
  assignedTo              Account?             @relation("AssignedTo", fields: [assignedToId], references: [id], onDelete: Cascade)
  boardLane               BoardLane            @relation(fields: [boardLaneId], references: [id], onDelete: Cascade)
  createdBy               Account              @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  project                 Project?             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  roleGroup               RoleGroup?           @relation("RoleGroup", fields: [roleGroupdId], references: [id], onDelete: Cascade)
  updatedBy               Account              @relation("UpdatedBy", fields: [updatedById], references: [id], onDelete: Cascade)
  company                 Company?             @relation(fields: [companyId], references: [id], onDelete: SetNull)
  taskPhase               TaskPhase?           @relation(fields: [taskPhaseId], references: [id], onDelete: SetNull)
  TaskWatcher             TaskWatcher[]
  TaskOrderContext        TaskOrderContext[]
  WorkflowTask            WorkflowTask?
  EmployeeTimekeepingRaw  EmployeeTimekeepingRaw[]
}

model TaskWatcher {
  id          Int             @id @default(autoincrement())
  taskId      Int?
  accountId   String?
  watcherType TaskWatcherType @default(WATCHER)
  account     Account?        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Task        Task?           @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, accountId])
}

model TaskOrderContext {
  id            Int      @id @default(autoincrement())
  userId        String?  // NULL for global orderings, populated for personal "My Tasks"
  taskId        Int
  orderIndex    Int
  viewType      String   // 'my', 'all', 'assigned', 'complete', etc.
  groupingMode  String   // 'none', 'priority', 'assignee', 'project', 'custom'
  groupingValue String?  // 'high', 'project-123', 'john-doe', 'today', null
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          Account? @relation(fields: [userId], references: [id], onDelete: Cascade)
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  // Unique constraints for both personal and global ordering
  @@unique([userId, taskId, viewType, groupingMode, groupingValue])
  @@unique([taskId, viewType, groupingMode, groupingValue])

  // Indexes for performance
  @@index([userId, viewType, groupingMode, groupingValue, orderIndex])
  @@index([viewType, groupingMode, groupingValue, orderIndex])
}

model TaskPhase {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  projectId   Int
  status      TaskPhaseStatus  @default(DRAFT)
  order       Int              @default(0)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isDeleted   Boolean          @default(false)
  companyId   Int

  project     Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([projectId, isDeleted, order])
  @@index([companyId])
}

model ApprovalMetadata {
  id               Int       @id @default(autoincrement())
  taskId           Int       @unique
  sourceModule     String
  sourceId         String
  sourceData       Json?
  actions          Json      @default("[\"approve\", \"reject\"]")
  approvalLevel    Int       @default(1)
  maxApprovalLevel Int       @default(1)
  approvalChain    Json?
  remarks          String?
  approvedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  task             Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Notifications {
  id                       Int                    @id @default(autoincrement())
  content                  String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  code                     String?
  showDialogId             String?
  showDialogModule         String?                @default("none")
  TaskProjectNotifications AccountNotifications[]
}

model AccountNotifications {
  id                   Int            @id @default(autoincrement())
  notificationsId      Int?
  receiverId           String?
  senderId             String?
  projectId            Int?
  hasRead              Boolean        @default(false)
  isDeleted            Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  notificationData     Notifications? @relation(fields: [notificationsId], references: [id], onDelete: Cascade)
  project              Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  notificationReceiver Account?       @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  notificationSender   Account?       @relation("SenderNotifications", fields: [senderId], references: [id], onDelete: Cascade)
}

model Warehouse {
  id                 String          @id @unique @default(uuid())
  name               String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  isDeleted          Boolean         @default(false)
  capacity           Float
  locationId         String?
  warehouseType      WarehouseType   @default(COMPANY_WAREHOUSE)
  projectId          Int?
  size               Float           @default(0)
  isMainWarehouse    Boolean         @default(false)
  equipmentVehicleId Int?
  companyId          Int?
  fromWarehouse      Delivery[]      @relation("FromWarehouse")
  Delivery           Delivery[]
  toWarehouse        Delivery[]      @relation("ToWarehouse")
  Equipment          Equipment[]
  inventories        InventoryItem[]
  itemReceipt        ItemReceipt[]
  company            Company?        @relation(fields: [companyId], references: [id])
  location           Location?       @relation(fields: [locationId], references: [id], onDelete: Cascade)
  project            Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([locationId])
}

model Brand {
  id          Int      @id @default(autoincrement())
  name        String
  code        String
  description String?
  isActive    Boolean  @default(true)
  companyId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  items       Item[]

  @@unique([companyId, code])
}

model Item {
  id                       String                     @id @default(uuid())
  name                     String
  sku                      String
  description              String
  size                     Int?
  isVariation              Boolean
  parent                   String?
  isDeleted                Boolean                    @default(false)
  isDraft                  Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  estimatedBuyingPrice     Float?
  uom                      String                     @default("pieces")
  variantCombination       String                     @default("")
  companyId                Int?
  sellingPrice             Int                        @default(0)
  maximumStockLevelPrice   Int                        @default(0)
  minimumStockLevelPrice   Int                        @default(0)
  brandId                  Int?
  boqTable                 BillOfQuantityTable[]
  BillOfQuantityTableItems BillOfQuantityTableItems[]
  EquipmentPartsItem       EquipmentPartsItem[]
  inventories              InventoryItem[]
  brand                    Brand?                     @relation(fields: [brandId], references: [id])
  company                  Company?                   @relation(fields: [companyId], references: [id])
  itemReceiptItems         ItemReceiptItems[]
  tags                     ItemTag[]
  ItemTier                 ItemTier[]
  SupplierItems            SupplierItems[]
  SupplierPriceUpdate      SupplierPriceUpdate[]

  @@unique([companyId, sku])
}

model ItemTier {
  id                String              @id @default(uuid())
  name              String
  updatedAt         DateTime            @updatedAt
  createdAt         DateTime            @default(now())
  itemId            String
  item              Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemTierAttribute ItemTierAttribute[]
}

model ItemTierAttribute {
  id           String   @id @default(uuid())
  itemTierId   String
  attributeKey String
  updatedAt    DateTime @updatedAt
  itemTier     ItemTier @relation(fields: [itemTierId], references: [id], onDelete: Cascade)
}

model ItemTag {
  itemId String
  tagId  String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([itemId, tagId])
}

model Tag {
  id     String    @id @default(uuid())
  tagKey String
  items  ItemTag[]
}

model InventoryItem {
  itemId         String
  stockCostCount Float     @default(0)
  stockCount     Int       @default(0)
  warehouseId    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  item           Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouse      Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@id([warehouseId, itemId])
}

model BillOfQuantity {
  subject                  String
  contractId               String
  contractLocation         String
  expirationDate           DateTime                   @default(now())
  totalMaterialCost        Float?                     @default(0)
  totalLaborCost           Float?                     @default(0)
  totalDirectCost          Float?                     @default(0)
  totalCost                Float?                     @default(0)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  isDeleted                Boolean                    @default(false)
  isDraft                  Boolean                    @default(false)
  projectId                Int
  createdById              String?
  updatedById              String?
  revision                 Int                        @default(1)
  constractNumber          Int                        @default(autoincrement())
  id                       Int                        @id @default(autoincrement())
  lastKeyUsed              Int                        @default(0)
  sourceBillOfQuantityId   Int?
  status                   BillOfQuantityStatus       @default(PENDING)
  createdByAccount         Account?                   @relation("CreatedBOQs", fields: [createdById], references: [id], onDelete: Cascade)
  Project                  Project                    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sourceBillOfQuantity     BillOfQuantity?            @relation("SelfRelation", fields: [sourceBillOfQuantityId], references: [id], onDelete: Cascade)
  BillOfQuantity           BillOfQuantity[]           @relation("SelfRelation")
  updatedByAccount         Account?                   @relation("UpdatedBOQs", fields: [updatedById], references: [id], onDelete: Cascade)
  boqTable                 BillOfQuantityTable[]      @relation("BillOfQuantityToTable")
  BillOfQuantityTableItems BillOfQuantityTableItems[]
  ItemReceipt              ItemReceipt[]

  @@unique([contractId, revision])
}

model BillOfQuantityTable {
  itemNumber               String?
  order                    Int
  quantity                 Float?                     @default(0)
  materialUnitCost         Float?                     @default(0)
  materialTotalCost        Float?                     @default(0)
  laborUnitCost            Float?                     @default(0)
  laborTotalCost           Float?                     @default(0)
  directCost               Float?                     @default(0)
  itemId                   String?
  originalItemId           String?
  id                       Int
  parentId                 Int?
  billOfQuantityId         Int
  type                     BoqType
  materialUnit             String?
  description              String?
  generation               Int                        @default(0)
  subTotal                 Float?                     @default(0)
  key                      Int                        @id @default(autoincrement())
  numerals                 String                     @default("")
  approvalStatus           ApprovalStatus             @default(NO_ITEM)
  particularType           ParticularType             @default(INVENTORY)
  color                    String                     @default("#fff")
  profitMargin             Float?                     @default(0)
  profitMarginPercentage   Float?                     @default(0)
  totalWithProfit          Float?                     @default(0)
  laborPercentageCost      Float?                     @default(0)
  quantityPurchased        Float?                     @default(0)
  subTotalWithProfit       Float?                     @default(0)
  directCostWithProfit     Float?                     @default(0)
  isQuantityTakeOff        Boolean                    @default(false)
  isQuantityTakeOffItem    Boolean                    @default(false)
  quantityTakeOffTotal     Float?                     @default(0)
  BillOfQuantity           BillOfQuantity             @relation("BillOfQuantityToTable", fields: [billOfQuantityId], references: [id], onDelete: Cascade)
  Item                     Item?                      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  BillOfQuantityTableItems BillOfQuantityTableItems[]
  ItemReceiptItems         ItemReceiptItems[]

  @@unique([billOfQuantityId, id])
}

model BillOfQuantityTableItems {
  id                     Int                 @id @default(autoincrement())
  billOfQuantityId       Int
  billOfQuantityTableKey Int
  itemId                 String
  amount                 Float
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  billOfQuantity         BillOfQuantity      @relation(fields: [billOfQuantityId], references: [id], onDelete: Cascade)
  billOfQuantityTable    BillOfQuantityTable @relation(fields: [billOfQuantityTableKey], references: [key], onDelete: Cascade)
  item                   Item                @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Equipment {
  name               String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  isDeleted          Boolean          @default(false)
  brandId            Int
  currentWarehouseId String
  equipmentState     EquipmentState   @default(WORKING)
  equipmentType      EquipmentType    @default(VEHICLE)
  id                 Int              @id @default(autoincrement())
  serialCode         String?
  companyId          Int?
  brand              EquipmentBrand   @relation(fields: [brandId], references: [id], onDelete: Cascade)
  company            Company?         @relation(fields: [companyId], references: [id])
  currentWarehouse   Warehouse        @relation(fields: [currentWarehouseId], references: [id], onDelete: Cascade)
  EquipmentParts     EquipmentParts[]
}

model EquipmentBrand {
  id        Int         @id @default(autoincrement())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isDeleted Boolean     @default(false)
  equipment Equipment[]
}

model EquipmentParts {
  id                               Int                                @id @default(autoincrement())
  equipmentId                      Int
  lastMaintenanceDate              DateTime?
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  partName                         String
  scheduleDay                      Int                                @default(0)
  nextMaintenanceDate              DateTime?
  equipment                        Equipment                          @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  EquipmentPartsItem               EquipmentPartsItem[]
  EquipmentPartsMaintenanceHistory EquipmentPartsMaintenanceHistory[]
}

model EquipmentPartsItem {
  id               Int            @id @default(autoincrement())
  equipmentPartsId Int
  itemId           String
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  equipmentParts   EquipmentParts @relation(fields: [equipmentPartsId], references: [id], onDelete: Cascade)
  item             Item           @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([equipmentPartsId, itemId])
}

model EquipmentPartsMaintenanceHistory {
  id                          Int              @id @default(autoincrement())
  checkedById                 String
  repairedById                String?
  equipmentPartsId            Int
  maintenanceDate             DateTime
  repairDate                  DateTime?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  maintenanceProofId          Int?
  isWorking                   Boolean          @default(true)
  repairItemPurchaseRequestId Int?
  repairStage                 repairStages     @default(PENDING_REPAIR)
  checkedBy                   Account          @relation("CheckedByRelation", fields: [checkedById], references: [id], onDelete: Cascade)
  equipmentParts              EquipmentParts   @relation(fields: [equipmentPartsId], references: [id], onDelete: Cascade)
  maintenanceProof            Files?           @relation(fields: [maintenanceProofId], references: [id], onDelete: Cascade)
  repairItemPurchaseRequest   PurchaseRequest? @relation(fields: [repairItemPurchaseRequestId], references: [id], onDelete: Cascade)
  repairedBy                  Account?         @relation("RepairedByRelation", fields: [repairedById], references: [id], onDelete: Cascade)
}

model Location {
  id                String               @id @default(uuid())
  name              String
  zipCode           String?
  landmark          String?
  description       String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  isDeleted         Boolean              @default(false)
  isDefaultLocation Boolean              @default(false)
  contactNumber     String?
  contactPerson     String?
  barangayId        Int
  municipalityId    Int
  provinceId        Int
  regionId          Int
  street            String               @default("")
  companyId         Int?
  clients           Client[]
  Delivery          Delivery[]
  leadDeals         LeadDeal[]
  barangay          LocationBarangay     @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  company           Company?             @relation(fields: [companyId], references: [id])
  municipality      LocationMunicipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
  province          LocationProvince     @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  region            LocationRegion       @relation(fields: [regionId], references: [id], onDelete: Cascade)
  projects          Project[]
  suppliers         Supplier[]
  warehouses        Warehouse[]
}

model Delivery {
  status                     DeliveryStatus    @default(PENDING)
  createdAt                  DateTime          @default(now())
  deliveryDate               DateTime
  fromWarehouseId            String?
  toWarehouseId              String
  updatedAt                  DateTime          @updatedAt
  id                         Int               @id @default(autoincrement())
  deliveredDeliveryReceiptId Int?
  sourceDeliveryReceiptId    Int               @default(0)
  pickUpLocationId           String?
  isLoadingStage             Boolean           @default(true)
  truckLoadStage             TruckLoadStage    @default(FOR_SECURING)
  inTransitWarehouseId       String?
  inTransitDeliveryReceiptId Int?
  companyId                  Int?
  company                    Company?          @relation(fields: [companyId], references: [id])
  deliveredDeliveryReceipt   ItemReceipt?      @relation("DeliveredDeliveryReceipt", fields: [deliveredDeliveryReceiptId], references: [id], onDelete: Cascade)
  fromWarehouse              Warehouse?        @relation("FromWarehouse", fields: [fromWarehouseId], references: [id], onDelete: Cascade)
  inTransitDeliveryReceipt   ItemReceipt?      @relation("InTransitDeliveryReceipt", fields: [inTransitDeliveryReceiptId], references: [id], onDelete: Cascade)
  inTransitWarehouse         Warehouse?        @relation(fields: [inTransitWarehouseId], references: [id], onDelete: Cascade)
  pickUpLocation             Location?         @relation(fields: [pickUpLocationId], references: [id], onDelete: Cascade)
  sourceDeliveryReceipt      ItemReceipt       @relation("SourceDeliveryReceipt", fields: [sourceDeliveryReceiptId], references: [id], onDelete: Cascade)
  toWarehouse                Warehouse         @relation("ToWarehouse", fields: [toWarehouseId], references: [id], onDelete: Cascade)
  DeliveryReceive            DeliveryReceive[]
  ItemReceipt                ItemReceipt[]
}

model DeliveryReceive {
  id            Int         @id @default(autoincrement())
  deliveryId    Int
  itemReceiptId Int
  receivedDate  DateTime    @default(now())
  delivery      Delivery    @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  itemReceipt   ItemReceipt @relation(fields: [itemReceiptId], references: [id], onDelete: Cascade)
}

model Supplier {
  id                       Int                        @id @default(autoincrement())
  name                     String
  contactNumber            String
  email                    String                     @unique @db.VarChar(100)
  isDeleted                Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  locationId               String
  taxType                  TaxType                    @default(VAT)
  paymentTerms             PaymentTerms               @default(NO_PAYMENT_TERMS)
  companyId                Int?
  itemReceipts             ItemReceipt[]
  PurchaseRequestSuppliers PurchaseRequestSuppliers[]
  company                  Company?                   @relation(fields: [companyId], references: [id])
  location                 Location                   @relation(fields: [locationId], references: [id], onDelete: Cascade)
  SupplierItems            SupplierItems[]
  SupplierPriceUpdate      SupplierPriceUpdate[]
}

model SupplierItems {
  id            Int      @id @default(autoincrement())
  supplierId    Int
  itemId        String
  supplierPrice Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, itemId])
}

model SupplierPriceUpdate {
  id            Int      @id @default(autoincrement())
  supplierId    Int
  itemId        String
  supplierPrice Float
  createdAt     DateTime @default(now())
  updateById    String
  item          Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  supplier      Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  updateBy      Account  @relation(fields: [updateById], references: [id], onDelete: Cascade)
}

model ItemReceipt {
  id                       Int                @id @default(autoincrement())
  supplierId               Int?
  warehouseId              String?
  type                     ItemReceiptType
  memo                     String?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @updatedAt
  totalPayableAmount       Float              @default(0)
  totalSettledAmount       Float              @default(0)
  isVoided                 Boolean            @default(false)
  isSettled                Boolean            @default(false)
  code                     String             @unique @default("TEST-0000")
  number                   Int                @default(0)
  isItemInventoryPosted    Boolean            @default(false)
  isMoneyPosted            Boolean            @default(false)
  processedBy              String             @default("SYSTEM")
  partnerReceiptId         Int?
  paymentTerms             PaymentTerms       @default(NO_PAYMENT_TERMS)
  taxType                  TaxType            @default(NO_TAX)
  deliveryId               Int?
  projectId                Int?
  deliveryTerms            DeliveryTerms      @default(PICKUP)
  itemFullfilledCount      Int                @default(0)
  itemTotalCount           Int                @default(0)
  billOfQuantityId         Int?
  companyId                Int?
  deliveredDeliveryReceipt Delivery[]         @relation("DeliveredDeliveryReceipt")
  Delivery                 Delivery[]         @relation("InTransitDeliveryReceipt")
  sourceDeliveryReceipt    Delivery[]         @relation("SourceDeliveryReceipt")
  DeliveryReceive          DeliveryReceive[]
  billOfQuantity           BillOfQuantity?    @relation(fields: [billOfQuantityId], references: [id], onDelete: Cascade)
  company                  Company?           @relation(fields: [companyId], references: [id])
  delivery                 Delivery?          @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  partnerReceipt           ItemReceipt?       @relation("PartnerReceipt", fields: [partnerReceiptId], references: [id], onDelete: Cascade)
  ItemReceipt              ItemReceipt[]      @relation("PartnerReceipt")
  project                  Project?           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  supplier                 Supplier?          @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  warehouse                Warehouse?         @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  items                    ItemReceiptItems[]
  PurchaseOrder            PurchaseOrder[]
  purchaseRequest          PurchaseRequest[]
}

model ItemReceiptItems {
  id                Int                  @id @default(autoincrement())
  itemReceiptId     Int
  itemId            String
  quantity          Float
  unitPrice         Float
  total             Float
  quantityAfter     Float                @default(0)
  quantityBefore    Float                @default(0)
  itemDescription   String               @default("")
  itemName          String               @default("")
  itemSku           String               @default("")
  itemRate          Float                @default(0)
  remainingQuantity Int                  @default(0)
  boqTableKey       Int?
  boqTable          BillOfQuantityTable? @relation(fields: [boqTableKey], references: [key], onDelete: Cascade)
  item              Item                 @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemReceipt       ItemReceipt          @relation(fields: [itemReceiptId], references: [id], onDelete: Cascade)

  @@unique([itemReceiptId, itemId])
}

model FundAccount {
  name                 String
  accountNumber        String
  description          String?
  balance              Float
  type                 FundAccountType
  isDeleted            Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  id                   Int                    @id @default(autoincrement())
  companyId            Int?
  company              Company?               @relation(fields: [companyId], references: [id])
  transactions         FundTransaction[]
  pettyCashHolders     PettyCashHolder[]
  PurchaseOrderPayment PurchaseOrderPayment[]
}

model FundTransaction {
  amount                Float                  @default(0)
  balanceBefore         Float                  @default(0)
  balanceAfter          Float                  @default(0)
  type                  FundTransactionType
  code                  FundTransactionCode
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  id                    Int                    @id @default(autoincrement())
  fundAccountId         Int
  memo                  String?
  fundAccount           FundAccount            @relation(fields: [fundAccountId], references: [id], onDelete: Cascade)
  pettyCashTransactions PettyCashTransaction[]
  RequestForPayment     RequestForPayment[]
}

model LocationRegion {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  Location         Location[]
  LocationProvince LocationProvince[]
}

model LocationProvince {
  id                   Int                    @id @default(autoincrement())
  name                 String
  description          String
  regionId             Int
  LocalHoliday         LocalHoliday[]
  Location             Location[]
  LocationMunicipality LocationMunicipality[]
  region               LocationRegion         @relation(fields: [regionId], references: [id], onDelete: Cascade)
}

model LocationMunicipality {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  provinceId       Int
  Location         Location[]
  LocationBarangay LocationBarangay[]
  province         LocationProvince   @relation(fields: [provinceId], references: [id], onDelete: Cascade)
}

model LocationBarangay {
  id             Int                  @id @default(autoincrement())
  name           String
  description    String
  municipalityId Int
  Location       Location[]
  municipality   LocationMunicipality @relation(fields: [municipalityId], references: [id], onDelete: Cascade)
}

model Files {
  name                             String
  type                             FileType
  size                             Int
  url                              String
  projectId                        Int?
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  taskId                           Int?
  encoding                         String?
  fieldName                        String
  mimetype                         String
  originalName                     String
  uploadedById                     String?
  id                               Int                                @id @default(autoincrement())
  accessCount                      Int                                @default(0)
  alternativeText                  String?
  blurPlaceholder                  String?
  caption                          String?
  companyId                        Int?
  dominantColor                    String?
  duration                         Float?
  folderId                         Int?
  height                           Int?
  lastAccessedAt                   DateTime?
  processingError                  String?
  processingStatus                 ProcessingStatus                   @default(PENDING)
  tags                             String[]                           @default([])
  variants                         Json?
  width                            Int?
  module                           ModuleType                         @default(CMS)
  Client                           Client[]
  DiscussionMessage                DiscussionMessage[]
  EmployeeContract                 EmployeeContract[]
  EmployeeDocument                 EmployeeDocument?
  EquipmentPartsMaintenanceHistory EquipmentPartsMaintenanceHistory[]
  company                          Company?                           @relation("MediaFiles", fields: [companyId], references: [id])
  folder                           MediaFolder?                       @relation(fields: [folderId], references: [id])
  project                          Project?                           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task                             Task?                              @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy                       Account?                           @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  PayrollFiling                    PayrollFiling[]
  PettyCashLiquidation             PettyCashLiquidation[]
  projectAccomplishment            ProjectAccomplishment[]
  Queue                            Queue[]
  Student                          Student[]

  @@index([companyId, type])
  @@index([companyId, folderId])
  @@index([companyId, processingStatus])
  @@index([companyId, createdAt])
  @@index([companyId, module])
  @@index([companyId, module, folderId])
  @@index([module, processingStatus])
}

model RequestForPayment {
  id                       Int                        @id @default(autoincrement())
  payeeType                PayeeType
  payeeId                  String
  amount                   Float
  isDeleted                Boolean                    @default(false)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  memo                     String
  projectId                Int?
  purchaseOrderId          Int?
  paymentType              FundAccountType
  status                   RequestForPaymentStatus    @default(PAYMENT_APPROVAL)
  fundTransactionId        Int?
  companyId                Int?
  company                  Company?                   @relation(fields: [companyId], references: [id])
  fundTransaction          FundTransaction?           @relation(fields: [fundTransactionId], references: [id], onDelete: Cascade)
  project                  Project?                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  purchaseOrder            PurchaseOrder?             @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  RequestForPaymentActions RequestForPaymentActions[]

  @@index([payeeType, payeeId])
}

model RequestForPaymentActions {
  id                  Int                     @id @default(autoincrement())
  requestForPaymentId Int
  actionByAccountId   String
  action              String
  memo                String
  fromStatus          RequestForPaymentStatus
  toStatus            RequestForPaymentStatus
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  actionByAccount     Account                 @relation(fields: [actionByAccountId], references: [id], onDelete: Cascade)
  requestForPayment   RequestForPayment       @relation(fields: [requestForPaymentId], references: [id], onDelete: Cascade)
}

model PettyCashTransactions {
  id            Int                 @id @default(autoincrement())
  amount        Float
  balanceBefore Float
  balanceAfter  Float
  type          FundTransactionType
  code          FundTransactionCode
  userAccountId String
  memo          String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  userAccount   Account             @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
}

model PettyCashLiquidation {
  id                       Int                        @id @default(autoincrement())
  description              String                     @default("")
  amount                   Float
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  attachmentProofId        Int?
  approvedById             String?
  rejectReason             String?
  requestedById            String
  status                   PettyCashLiquidationStatus @default(PENDING)
  pettyCashHolderId        Int?
  businessPurpose          String?
  expenseCategory          String?
  isAiExtracted            Boolean                    @default(false)
  receiptDate              DateTime?
  receiptNumber            String?
  vendorAddress            String?
  vendorName               String?
  vendorTin                String?
  vatAmount                Float                      @default(0)
  vatAmountConfidence      Int                        @default(0)
  withholdingTaxAmount     Float                      @default(0)
  withholdingTaxConfidence Int                        @default(0)
  totalAIConfidence        Int                        @default(0)
  workflowInstanceId       Int?                       @unique
  approvedBy               Account?                   @relation("ApprovedByRelation", fields: [approvedById], references: [id], onDelete: Cascade)
  attachmentProof          Files?                     @relation(fields: [attachmentProofId], references: [id], onDelete: Cascade)
  pettyCashHolder          PettyCashHolder?           @relation(fields: [pettyCashHolderId], references: [id], onDelete: Cascade)
  requestedBy              Account                    @relation("RequestedByRelation", fields: [requestedById], references: [id], onDelete: Cascade)
  workflowInstance         WorkflowInstance?          @relation(fields: [workflowInstanceId], references: [id])
}

model PettyCashHolder {
  id                Int                    @id @default(autoincrement())
  accountId         String
  initialAmount     Float
  currentBalance    Float
  reason            String
  isActive          Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  companyId         Int?
  fundAccountId     Int?
  account           Account                @relation(fields: [accountId], references: [id], onDelete: Cascade)
  company           Company?               @relation(fields: [companyId], references: [id], onDelete: Cascade)
  fundAccount       FundAccount?           @relation(fields: [fundAccountId], references: [id])
  liquidations      PettyCashLiquidation[]
  transactions      PettyCashTransaction[]
  transfersReceived PettyCashTransaction[] @relation("TransferFrom")
}

model PettyCashTransaction {
  id                   Int                      @id @default(autoincrement())
  pettyCashHolderId    Int
  type                 PettyCashTransactionType
  amount               Float
  balanceBefore        Float
  balanceAfter         Float
  reason               String
  performedById        String
  createdAt            DateTime                 @default(now())
  fundTransactionId    Int?
  transferFromHolderId Int?
  fundTransaction      FundTransaction?         @relation(fields: [fundTransactionId], references: [id])
  performedBy          Account                  @relation(fields: [performedById], references: [id], onDelete: Cascade)
  pettyCashHolder      PettyCashHolder          @relation(fields: [pettyCashHolderId], references: [id], onDelete: Cascade)
  transferFromHolder   PettyCashHolder?         @relation("TransferFrom", fields: [transferFromHolderId], references: [id])
}

model Collection {
  id                        Int                    @id @default(autoincrement())
  projectId                 Int
  amount                    Float
  type                      CollectionType
  createdById               String
  isPaid                    Boolean                @default(false)
  isDeleted                 Boolean                @default(false)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  amountPaid                Float                  @default(0)
  description               String                 @default("")
  isForReview               Boolean                @default(true)
  accomplishmentReferenceId Int?
  companyId                 Int?
  accomplishmentReference   ProjectAccomplishment? @relation(fields: [accomplishmentReferenceId], references: [id], onDelete: Cascade)
  company                   Company?               @relation(fields: [companyId], references: [id])
  createdBy                 Account                @relation("CreatedBy", fields: [createdById], references: [id], onDelete: Cascade)
  project                   Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ProjectAccomplishment {
  id                 Int          @id @default(autoincrement())
  projectId          Int
  title              String
  description        String       @default("")
  percentage         Float        @default(0)
  attachmentId       Int?
  accomplishmentDate DateTime
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  reviewedById       String
  previousPercentage Float        @default(0)
  Collection         Collection[]
  attachment         Files?       @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  project            Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reviewedBy         Account      @relation("ReviewedBy", fields: [reviewedById], references: [id], onDelete: Cascade)
}

model LocalHoliday {
  id         Int              @id @default(autoincrement())
  date       DateTime
  type       HolidayType
  provinceId Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  name       String
  companyId  Int?
  company    Company?         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  province   LocationProvince @relation(fields: [provinceId], references: [id], onDelete: Cascade)
}

model Shift {
  id                            Int                            @id @default(autoincrement())
  shiftCode                     String
  breakHours                    Float
  targetHours                   Float
  isDeleted                     Boolean                        @default(false)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  companyId                     Int?
  shiftType                     ShiftType                      @default(TIME_BOUND)
  filingId                      Int?                           @unique
  purpose                       ShiftPurpose                   @default(REGULAR)
  individualScheduleAssignments IndividualScheduleAssignment[]
  ScheduleFriday                Schedule[]                     @relation("FridayShift")
  ScheduleMonday                Schedule[]                     @relation("MondayShift")
  ScheduleSaturday              Schedule[]                     @relation("SaturdayShift")
  ScheduleSunday                Schedule[]                     @relation("SundayShift")
  ScheduleThursday              Schedule[]                     @relation("ThursdayShift")
  ScheduleTuesday               Schedule[]                     @relation("TuesdayShift")
  ScheduleWednesday             Schedule[]                     @relation("WednesdayShift")
  company                       Company?                       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  filing                        PayrollFiling?                 @relation(fields: [filingId], references: [id], onDelete: Cascade)
  shiftTime                     ShiftTime[]
  teamScheduleAssignments       TeamScheduleAssignment[]
}

model ShiftTime {
  id          Int      @id @default(autoincrement())
  shiftId     Int
  startTime   String
  endTime     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isBreakTime Boolean  @default(false)
  shift       Shift    @relation(fields: [shiftId], references: [id], onDelete: Cascade)
}

model Schedule {
  id               Int            @id @default(autoincrement())
  scheduleCode     String
  mondayShiftId    Int
  tuesdayShiftId   Int
  wednesdayShiftId Int
  thursdayShiftId  Int
  fridayShiftId    Int
  saturdayShiftId  Int
  sundayShiftId    Int
  isDeleted        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  companyId        Int?
  EmployeeData     EmployeeData[]
  company          Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  fridayShift      Shift          @relation("FridayShift", fields: [fridayShiftId], references: [id], onDelete: Cascade)
  mondayShift      Shift          @relation("MondayShift", fields: [mondayShiftId], references: [id], onDelete: Cascade)
  saturdayShift    Shift          @relation("SaturdayShift", fields: [saturdayShiftId], references: [id], onDelete: Cascade)
  sundayShift      Shift          @relation("SundayShift", fields: [sundayShiftId], references: [id], onDelete: Cascade)
  thursdayShift    Shift          @relation("ThursdayShift", fields: [thursdayShiftId], references: [id], onDelete: Cascade)
  tuesdayShift     Shift          @relation("TuesdayShift", fields: [tuesdayShiftId], references: [id], onDelete: Cascade)
  wednesdayShift   Shift          @relation("WednesdayShift", fields: [wednesdayShiftId], references: [id], onDelete: Cascade)

  @@index([scheduleCode, companyId])
}

model Cutoff {
  id                    Int               @id @default(autoincrement())
  cutoffCode            String
  cutoffConfig          Json              @default("{}")
  cutoffType            CutoffType
  releaseProcessingDays Int               @default(3)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  companyId             Int?
  isDeleted             Boolean           @default(false)
  company               Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  CutoffDateRange       CutoffDateRange[]
  PayrollGroup          PayrollGroup[]
}

model CutoffDateRange {
  id                                                  String                      @id
  startDate                                           DateTime
  endDate                                             DateTime
  processingDate                                      DateTime
  cutoffId                                            Int
  cutoffPeriodType                                    CutoffPeriodType
  status                                              CutoffDateRangeStatus       @default(TIMEKEEPING)
  payrollProcessingQueueId                            String?
  payslipProcessingQueueId                            String?
  timekeepingProcessingQueueId                        String?
  totalGrossPay                                       Float                       @default(0)
  totalNetPay                                         Float                       @default(0)
  totalAdditionalEarnings                             Float                       @default(0)
  totalAllowance                                      Float                       @default(0)
  totalBasicPay                                       Float                       @default(0)
  totalBasicSalary                                    Float                       @default(0)
  totalDeduction                                      Float                       @default(0)
  totalDeductionAbsent                                Float                       @default(0)
  totalDeductionLate                                  Float                       @default(0)
  totalDeductionUndertime                             Float                       @default(0)
  totalEarningNightDiff                               Float                       @default(0)
  totalEarningNightDiffOT                             Float                       @default(0)
  totalEarningOvertime                                Float                       @default(0)
  totalEarningRegularHoliday                          Float                       @default(0)
  totalEarningRestDay                                 Float                       @default(0)
  totalEarningSpecialHoliday                          Float                       @default(0)
  totalGovernmentContribution                         Float                       @default(0)
  totalLoans                                          Float                       @default(0)
  totalTax                                            Float                       @default(0)
  totalAdditionalDeduction                            Float                       @default(0)
  totalBasicPayMonthlyRate                            Float                       @default(0)
  totalDeductionSalaryAdjustmnt                       Float                       @default(0)
  totalEarningSalaryAdjustment                        Float                       @default(0)
  totalEarningsPlusAllowance                          Float                       @default(0)
  totalGovernmentContributionPagibig                  Float                       @default(0)
  totalGovernmentContributionPagibigBasis             Float                       @default(0)
  totalGovernmentContributionPagibigEmployeeShare     Float                       @default(0)
  totalGovernmentContributionPagibigEmployerShare     Float                       @default(0)
  totalGovernmentContributionPagibigMaximumEEShare    Float                       @default(0)
  totalGovernmentContributionPagibigMaximumERShare    Float                       @default(0)
  totalGovernmentContributionPagibigMinimumPercentage Float                       @default(0)
  totalGovernmentContributionPagibigMinimumShare      Float                       @default(0)
  totalGovernmentContributionPagibigPercentage        Float                       @default(0)
  totalGovernmentContributionPhilhealth               Float                       @default(0)
  totalGovernmentContributionPhilhealthBasis          Float                       @default(0)
  totalGovernmentContributionPhilhealthEmployeeShare  Float                       @default(0)
  totalGovernmentContributionPhilhealthEmployerShare  Float                       @default(0)
  totalGovernmentContributionPhilhealthMaximum        Float                       @default(0)
  totalGovernmentContributionPhilhealthMinimum        Float                       @default(0)
  totalGovernmentContributionPhilhealthPercentage     Float                       @default(0)
  totalGovernmentContributionSSS                      Float                       @default(0)
  totalGovernmentContributionSSSBasis                 Float                       @default(0)
  totalGovernmentContributionSSSEEMPF                 Float                       @default(0)
  totalGovernmentContributionSSSEER                   Float                       @default(0)
  totalGovernmentContributionSSSEETotal               Float                       @default(0)
  totalGovernmentContributionSSSEREC                  Float                       @default(0)
  totalGovernmentContributionSSSERMPF                 Float                       @default(0)
  totalGovernmentContributionSSSERR                   Float                       @default(0)
  totalGovernmentContributionSSSERTotal               Float                       @default(0)
  totalGovernmentContributionSSSMSMPF                 Float                       @default(0)
  totalGovernmentContributionSSSMSR                   Float                       @default(0)
  totalGovernmentContributionSSSMSTotal               Float                       @default(0)
  totalGovernmentContributionTax                      Float                       @default(0)
  totalGrossTaxableIncome                             Float                       @default(0)
  totalNonTaxableAllowance                            Float                       @default(0)
  totalNonTaxableDeduction                            Float                       @default(0)
  totalNonTaxableGovernmentContribution               Float                       @default(0)
  totalTaxByPercentage                                Float                       @default(0)
  totalTaxFixedAmount                                 Float                       @default(0)
  totalTaxOffset                                      Float                       @default(0)
  totalTaxPercentage                                  Float                       @default(0)
  totalTaxableAllowance                               Float                       @default(0)
  totalTaxableIncome                                  Float                       @default(0)
  totalDeminimisAllowance                             Float                       @default(0)
  AllowancePlanHistory                                AllowancePlanHistory[]
  BranchTimekeepingStatus                             BranchTimekeepingStatus[]
  cutoff                                              Cutoff                      @relation(fields: [cutoffId], references: [id], onDelete: Cascade)
  DeductionPlanHistory                                DeductionPlanHistory[]
  EmployeeSalaryAdjustment                            EmployeeSalaryAdjustment[]
  EmployeeTimekeepingCutoff                           EmployeeTimekeepingCutoff[]
  GovernmentPaymentHistory                            GovernmentPaymentHistory[]
  PayrollApprovalHistory                              PayrollApprovalHistory[]

  @@index([processingDate, cutoffId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([processingDate, cutoffId, status])
}

model PayrollGroup {
  id                           Int                  @id @default(autoincrement())
  payrollGroupCode             String               @unique
  cutoffId                     Int
  salaryRateType               SalaryRateType
  lateDeductionCustom          Json                 @default("{}")
  undertimeDeductionCustom     Json                 @default("{}")
  absentDeductionHours         Float                @default(0)
  shiftingWorkingDaysPerWeek   Int                  @default(6)
  lateGraceTimeMinutes         Float
  undertimeGraceTimeMinutes    Float
  isDeleted                    Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  overtimeRateFactors          Json                 @default("{}")
  lateDeductionType            DeductionType
  undertimeDeductionType       DeductionType
  overtimeGraceTimeMinutes     Float                @default(0)
  deductionPeriodPagibig       DeductionPeriod      @default(EVERY_PERIOD)
  deductionPeriodPhilhealth    DeductionPeriod      @default(EVERY_PERIOD)
  deductionPeriodSSS           DeductionPeriod      @default(EVERY_PERIOD)
  deductionPeriodWitholdingTax DeductionPeriod      @default(EVERY_PERIOD)
  deductionBasisPhilhealth     DeductionTargetBasis @default(BASIC_SALARY)
  deductionBasisSSS            DeductionTargetBasis @default(BASIC_SALARY)
  companyId                    Int?
  EmployeeData                 EmployeeData[]
  company                      Company?             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  cutoff                       Cutoff               @relation(fields: [cutoffId], references: [id], onDelete: Cascade)
}

model EmployeeData {
  accountId          String              @unique
  payrollGroupId     Int
  activeContractId   Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  scheduleId         Int
  branchId           Int
  employeeCode       String              @default("")
  isActive           Boolean             @default(true)
  bankAccountNumber  String?
  bankName           String?
  biometricsNumber   String?
  hdmfNumber         String?
  phicNumber         String?
  sssNumber          String?
  tinNumber          String?
  account            Account             @relation(fields: [accountId], references: [id], onDelete: Cascade)
  activeContract     EmployeeContract    @relation(fields: [activeContractId], references: [id], onDelete: Cascade)
  branch             Project             @relation(fields: [branchId], references: [id], onDelete: Cascade)
  payrollGroup       PayrollGroup        @relation(fields: [payrollGroupId], references: [id], onDelete: Cascade)
  schedule           Schedule            @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  employeeDocuments  EmployeeDocument[]
  employeeLeavePlans EmployeeLeavePlan[]

  @@index([employeeCode])
  @@index([payrollGroupId])
  @@index([branchId])
  @@index([employeeCode], map: "idx_employee_code")
  @@index([branchId, isActive], map: "idx_employee_company_active")
  @@index([createdAt(sort: Desc)], map: "idx_employee_created")
}

model EmployeeContract {
  id               Int              @id @default(autoincrement())
  accountId        String
  startDate        DateTime
  endDate          DateTime?
  isDeleted        Boolean          @default(false)
  employmentStatus EmploymentStatus
  monthlyRate      Float
  contractFileId   Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isActive         Boolean          @default(true)
  account          Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  contractFile     Files?           @relation(fields: [contractFileId], references: [id], onDelete: Cascade)
  EmployeeData     EmployeeData[]
}

model EmployeeDocument {
  id           Int                      @id @default(autoincrement())
  accountId    String
  fileId       Int                      @unique
  category     EmployeeDocumentCategory
  documentType String
  description  String?
  expiryDate   DateTime?
  isActive     Boolean                  @default(true)
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  employee     EmployeeData             @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  file         Files                    @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model EmployeeTimekeeping {
  id                                   Int                              @id @default(autoincrement())
  date                                 DateTime
  workMinutes                          Float                            @default(0)
  overtimeMinutes                      Float                            @default(0)
  nightDifferentialMinutes             Float                            @default(0)
  nightDifferentialOvertimeMinutes     Float                            @default(0)
  createdAt                            DateTime                         @default(now())
  updatedAt                            DateTime                         @updatedAt
  lateMinutes                          Float                            @default(0)
  undertimeMinutes                     Float                            @default(0)
  sourceType                           EmployeeTimekeepingSourceType    @default(COMPUTED)
  isRestDay                            Boolean                          @default(false)
  nightDifferentialOvertimeApproved    Float                            @default(0)
  nightDifferentialOvertimeForApproval Float                            @default(0)
  overtimeMinutesApproved              Float                            @default(0)
  overtimeMinutesForApproval           Float                            @default(0)
  remarks                              String?                          @default("")
  absentCount                          Float                            @default(0)
  isExtraDay                           Boolean                          @default(false)
  regularHolidayCount                  Float                            @default(0)
  specialHolidayCount                  Float                            @default(0)
  activeShiftConfig                    Json                             @default("{}")
  activeShiftType                      ActiveShiftType                  @default(NONE)
  totalCreditedHours                   Float                            @default(0)
  presentDayCount                      Float                            @default(0)
  employeeTimekeepingCutoffId          Int
  dateString                           String                           @default("")
  overrideId                           Int?
  breakMinutes                         Float                            @default(0)
  isDayApproved                        Boolean                          @default(true)
  isInitialized                        Boolean                          @default(false)
  workDayCount                         Float                            @default(0)
  isEligibleHoliday                    Boolean                          @default(true)
  isEligibleHolidayOverride            Boolean?
  AttendanceConflict                   AttendanceConflict[]
  EmployeeSalaryComputationPerDay      EmployeeSalaryComputationPerDay?
  employeeTimekeepingCutoff            EmployeeTimekeepingCutoff        @relation(fields: [employeeTimekeepingCutoffId], references: [id], onDelete: Cascade)
  override                             EmployeeTimekeepingOverride?     @relation(fields: [overrideId], references: [id])
  EmployeeTimekeepingHoliday           EmployeeTimekeepingHoliday[]
  EmployeeTimekeepingLogs              EmployeeTimekeepingLogs[]
  EmployeeTimekeepingComputed          EmployeeTimekeepingComputed[]    @relation("EmployeeTimekeepingToEmployeeTimekeepingComputed")

  @@unique([employeeTimekeepingCutoffId, date])
  @@index([date])
  @@index([employeeTimekeepingCutoffId])
  @@index([employeeTimekeepingCutoffId, date, sourceType])
}

model EmployeeTimekeepingHoliday {
  id            Int                 @id @default(autoincrement())
  timekeepingId Int
  name          String
  holidayType   HolidayType
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  source        String
  timekeeping   EmployeeTimekeeping @relation(fields: [timekeepingId], references: [id], onDelete: Cascade)
}

model EmployeeTimekeepingOverride {
  id                               Int                   @id @default(autoincrement())
  workMinutes                      Float                 @default(0)
  undertimeMinutes                 Float                 @default(0)
  lateMinutes                      Float                 @default(0)
  nightDifferentialMinutes         Float                 @default(0)
  overtimeMinutes                  Float                 @default(0)
  nightDifferentialOvertimeMinutes Float                 @default(0)
  timekeepingId                    Int                   @unique
  EmployeeTimekeeping              EmployeeTimekeeping[]
}

model EmployeeTimekeepingComputed {
  id                               Int                   @id @default(autoincrement())
  workMinutes                      Float                 @default(0)
  undertimeMinutes                 Float                 @default(0)
  lateMinutes                      Float                 @default(0)
  nightDifferentialMinutes         Float                 @default(0)
  overtimeMinutes                  Float                 @default(0)
  nightDifferentialOvertimeMinutes Float                 @default(0)
  timekeepingId                    Int                   @unique
  breakMinutes                     Float                 @default(0)
  rawLateMinutes                   Float                 @default(0)
  rawOvertimeMinutes               Float                 @default(0)
  rawUndertimeMinutes              Float                 @default(0)
  EmployeeTimekeeping              EmployeeTimekeeping[] @relation("EmployeeTimekeepingToEmployeeTimekeepingComputed")
}

model EmployeeTimekeepingCutoff {
  id                                       Int                        @id @default(autoincrement())
  accountId                                String
  absentCount                              Float                      @default(0)
  lateMinutes                              Float                      @default(0)
  nightDifferentialMinutes                 Float                      @default(0)
  nightDifferentialOvertimeApproved        Float                      @default(0)
  nightDifferentialOvertimeForApproval     Float                      @default(0)
  nightDifferentialOvertimeMinutes         Float                      @default(0)
  overtimeMinutes                          Float                      @default(0)
  overtimeMinutesApproved                  Float                      @default(0)
  overtimeMinutesForApproval               Float                      @default(0)
  presentDayCount                          Float                      @default(0)
  undertimeMinutes                         Float                      @default(0)
  workMinutes                              Float                      @default(0)
  cutoffDateRangeId                        String
  totalCreditedHours                       Float                      @default(0)
  overrideLateMinutes                      Float                      @default(0)
  overrideNightDifferentialMinutes         Float                      @default(0)
  overrideNightDifferentialOvertimeMinutes Float                      @default(0)
  overrideOvertimeMinutes                  Float                      @default(0)
  overrideWorkMinutes                      Float                      @default(0)
  breakMinutes                             Float                      @default(0)
  regularHolidayCount                      Float                      @default(0)
  specialHolidayCount                      Float                      @default(0)
  workDayCount                             Float                      @default(0)
  EmployeeSalaryComputation                EmployeeSalaryComputation?
  EmployeeTimekeeping                      EmployeeTimekeeping[]
  account                                  Account                    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  cutoffDateRange                          CutoffDateRange            @relation(fields: [cutoffDateRangeId], references: [id], onDelete: Cascade)
  GovernmentPaymentHistory                 GovernmentPaymentHistory[]

  @@unique([accountId, cutoffDateRangeId])
  @@index([accountId])
  @@index([cutoffDateRangeId])
}

model EmployeeSalaryComputation {
  employeeTimekeepingCutoffId                    Int                                   @id
  basicSalary                                    Float                                 @default(0)
  deductionLate                                  Float                                 @default(0)
  deductionUndertime                             Float                                 @default(0)
  deductionAbsent                                Float                                 @default(0)
  deductionSalaryAdjustmnt                       Float                                 @default(0)
  allowance                                      Float                                 @default(0)
  earningsPlusAllowance                          Float                                 @default(0)
  governmentContributionSSS                      Float                                 @default(0)
  governmentContributionPhilhealth               Float                                 @default(0)
  governmentContributionPagibig                  Float                                 @default(0)
  governmentContributionTax                      Float                                 @default(0)
  totalGovernmentContribution                    Float                                 @default(0)
  loans                                          Float                                 @default(0)
  basicPay                                       Float                                 @default(0)
  grossPay                                       Float                                 @default(0)
  netPay                                         Float                                 @default(0)
  stage                                          EmployeeSalaryComputationStage        @default(PENDING)
  earningNightDifferential                       Float                                 @default(0)
  earningOvertime                                Float                                 @default(0)
  earningRegularHoliday                          Float                                 @default(0)
  earningRestDay                                 Float                                 @default(0)
  earningSalaryAdjustment                        Float                                 @default(0)
  earningSpecialHoliday                          Float                                 @default(0)
  totalAdditionalEarnings                        Float                                 @default(0)
  totalDeduction                                 Float                                 @default(0)
  earningNightDifferentialOvertime               Float                                 @default(0)
  deductionBasisPhilhealth                       DeductionTargetBasis                  @default(BASIC_SALARY)
  deductionBasisSSS                              DeductionTargetBasis                  @default(BASIC_SALARY)
  deductionPeriodPagibig                         DeductionPeriod                       @default(EVERY_PERIOD)
  deductionPeriodPhilhealth                      DeductionPeriod                       @default(EVERY_PERIOD)
  deductionPeriodSSS                             DeductionPeriod                       @default(EVERY_PERIOD)
  deductionPeriodWitholdingTax                   DeductionPeriod                       @default(EVERY_PERIOD)
  salaryRateType                                 SalaryRateType                        @default(MONTHLY_RATE)
  cutoffRate                                     Float                                 @default(0)
  dailyRate                                      Float                                 @default(0)
  hourlyRate                                     Float                                 @default(0)
  monthlyRate                                    Float                                 @default(0)
  basicPayMonthlyRate                            Float                                 @default(0)
  totalAdditionalDeduction                       Float                                 @default(0)
  governmentContributionSSSEEMPF                 Float                                 @default(0)
  governmentContributionSSSEER                   Float                                 @default(0)
  governmentContributionSSSEETotal               Float                                 @default(0)
  governmentContributionSSSERMPF                 Float                                 @default(0)
  governmentContributionSSSERR                   Float                                 @default(0)
  governmentContributionSSSERTotal               Float                                 @default(0)
  governmentContributionSSSMSMPF                 Float                                 @default(0)
  governmentContributionSSSMSR                   Float                                 @default(0)
  governmentContributionSSSMSTotal               Float                                 @default(0)
  governmentContributionSSSBasis                 Float                                 @default(0)
  governmentContributionPhilhealthBasis          Float                                 @default(0)
  governmentContributionPhilhealthMaximum        Float                                 @default(0)
  governmentContributionPhilhealthMinimum        Float                                 @default(0)
  governmentContributionPhilhealthPercentage     Float                                 @default(0)
  governmentContributionPhilhealthEmployeeShare  Float                                 @default(0)
  governmentContributionPhilhealthEmployerShare  Float                                 @default(0)
  governmentContributionPagibigBasis             Float                                 @default(0)
  governmentContributionPagibigEmployeeShare     Float                                 @default(0)
  governmentContributionPagibigEmployerShare     Float                                 @default(0)
  governmentContributionPagibigMaximumEEShare    Float                                 @default(0)
  governmentContributionPagibigMaximumERShare    Float                                 @default(0)
  governmentContributionPagibigMinimumPercentage Float                                 @default(0)
  governmentContributionPagibigMinimumShare      Float                                 @default(0)
  governmentContributionPagibigPercentage        Float                                 @default(0)
  grossTaxableIncome                             Float                                 @default(0)
  nonTaxableAllowance                            Float                                 @default(0)
  taxableAllowance                               Float                                 @default(0)
  totalBasicSalary                               Float                                 @default(0)
  totalNonTaxableGovernmentContribution          Float                                 @default(0)
  taxFixedAmount                                 Float                                 @default(0)
  taxOffset                                      Float                                 @default(0)
  taxPercentage                                  Float                                 @default(0)
  taxTotal                                       Float                                 @default(0)
  nonTaxableDeduction                            Float                                 @default(0)
  taxableIncome                                  Float                                 @default(0)
  governmentContributionSSSEREC                  Float                                 @default(0)
  taxByPercentage                                Float                                 @default(0)
  governmentContributionPagibigBasicCurrent      Float                                 @default(0)
  governmentContributionPagibigBasisPrevious     Float                                 @default(0)
  governmentContributionPhilhealthBasicCurrent   Float                                 @default(0)
  governmentContributionPhilhealthBasisPrevious  Float                                 @default(0)
  governmentContributionSSSBasicCurrent          Float                                 @default(0)
  taxableIncomeCurrent                           Float                                 @default(0)
  taxableIncomePrevious                          Float                                 @default(0)
  governmentContributionSSSBasisPrevious         Float                                 @default(0)
  basicPayBeforeAdjustment                       Float                                 @default(0)
  salaryAdjustment                               Float                                 @default(0)
  deminimisAllowance                             Float                                 @default(0)
  employeeTimekeepingCutoff                      EmployeeTimekeepingCutoff             @relation(fields: [employeeTimekeepingCutoffId], references: [id], onDelete: Cascade)
  EmployeeSalaryComputationAllowances            EmployeeSalaryComputationAllowances[]
  EmployeeSalaryComputationDeductions            EmployeeSalaryComputationDeductions[]
}

model EmployeeSalaryComputationDeductions {
  id                          Int                       @id @default(autoincrement())
  employeeSalaryComputationId Int
  amount                      Float                     @default(0)
  isPosted                    Boolean                   @default(false)
  createdAt                   DateTime                  @default(now())
  deductionPlanId             Int
  deductionPlan               DeductionPlan             @relation(fields: [deductionPlanId], references: [id], onDelete: Cascade)
  employeeSalaryComputation   EmployeeSalaryComputation @relation(fields: [employeeSalaryComputationId], references: [employeeTimekeepingCutoffId], onDelete: Cascade)

  @@unique([employeeSalaryComputationId, deductionPlanId])
}

model EmployeeSalaryComputationAllowances {
  id                          Int                       @id @default(autoincrement())
  employeeSalaryComputationId Int
  amount                      Float                     @default(0)
  isPosted                    Boolean                   @default(false)
  createdAt                   DateTime                  @default(now())
  allowancePlanId             Int
  allowancePlan               AllowancePlan             @relation(fields: [allowancePlanId], references: [id], onDelete: Cascade)
  employeeSalaryComputation   EmployeeSalaryComputation @relation(fields: [employeeSalaryComputationId], references: [employeeTimekeepingCutoffId], onDelete: Cascade)

  @@unique([employeeSalaryComputationId, allowancePlanId])
}

model EmployeeSalaryComputationPerDay {
  timekeepingId                       Int                 @id
  rateOvertime                        Float               @default(0)
  rateNightDifferentialOvertime       Float               @default(0)
  rateRegularHoliday                  Float               @default(0)
  rateSpecialHoliday                  Float               @default(0)
  deductionLate                       Float               @default(0)
  deductionUndertime                  Float               @default(0)
  totalDeduction                      Float               @default(0)
  earningOvertimeRaw                  Float               @default(0)
  earningOvertime                     Float               @default(0)
  earningNightDifferentialRaw         Float               @default(0)
  earningNightDifferential            Float               @default(0)
  earningNightDifferentialOvertimeRaw Float               @default(0)
  earningNightDifferentialOvertime    Float               @default(0)
  earningRegularHoliday               Float               @default(0)
  earningSpecialHolidayRaw            Float               @default(0)
  earningSpecialHoliday               Float               @default(0)
  totalAdditionalEarnings             Float               @default(0)
  basicPay                            Float               @default(0)
  rateNightDifferential               Float               @default(0)
  earningRestDay                      Float               @default(0)
  rateRestDay                         Float               @default(0)
  deductionAbsent                     Float               @default(0)
  cutoffRate                          Float               @default(0)
  dailyRate                           Float               @default(0)
  hourlyRate                          Float               @default(0)
  monthlyRate                         Float               @default(0)
  isFridayWorkDay                     Boolean             @default(false)
  isMondayWorkDay                     Boolean             @default(false)
  isSaturdayWorkDay                   Boolean             @default(false)
  isSundayWorkDay                     Boolean             @default(false)
  isThursdayWorkDay                   Boolean             @default(false)
  isTuesdayWorkDay                    Boolean             @default(false)
  isWednesdayWorkDay                  Boolean             @default(false)
  yearCountFriday                     Float               @default(0)
  yearCountMonday                     Float               @default(0)
  yearCountSaturday                   Float               @default(0)
  yearCountSunday                     Float               @default(0)
  yearCountThursday                   Float               @default(0)
  yearCountTuesday                    Float               @default(0)
  yearCountWednesday                  Float               @default(0)
  totalWorkDaysInYear                 Float               @default(0)
  timekeeping                         EmployeeTimekeeping @relation(fields: [timekeepingId], references: [id], onDelete: Cascade)
}

model EmployeeTimekeepingLogs {
  id               Int                     @id @default(autoincrement())
  timekeepingId    Int
  timeIn           String                  @default("00:00")
  timeOut          String                  @default("00:00")
  timeSpan         Float                   @default(0)
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  type             BreakdownType
  isRaw            Boolean                 @default(false)
  sourceRawId      Int?
  isNextDayOverlap Boolean                 @default(false)
  sourceRaw        EmployeeTimekeepingRaw? @relation(fields: [sourceRawId], references: [id], onDelete: Cascade)
  timekeeping      EmployeeTimekeeping     @relation(fields: [timekeepingId], references: [id], onDelete: Cascade)
}

model EmployeeTimekeepingRaw {
  id                      Int                       @id @default(autoincrement())
  accountId               String
  timeIn                  DateTime
  timeOut                 DateTime?
  timeSpan                Float                     @default(0)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  source                  TimekeepingSource         @default(MANUAL)
  remarks                 String?
  importBatchId           String?
  taskId                  Int?
  taskTitle               String?
  projectId               Int?
  deviceId                String?                   // Device that recorded this entry
  // TIME-IN GEOLOCATION FIELDS
  timeInLatitude          Float?                    // Latitude when timer started
  timeInLongitude         Float?                    // Longitude when timer started
  timeInLocation          String?                   // Location name (e.g., "Manila, Philippines")
  timeInIpAddress         String?                   // IP address when timer started
  timeInGeolocationEnabled Boolean?                 // Whether geolocation was enabled
  // TIME-OUT GEOLOCATION FIELDS
  timeOutLatitude         Float?                    // Latitude when timer stopped
  timeOutLongitude        Float?                    // Longitude when timer stopped
  timeOutLocation         String?                   // Location name (e.g., "Quezon City, Philippines")
  timeOutIpAddress        String?                   // IP address when timer stopped
  timeOutGeolocationEnabled Boolean?                // Whether geolocation was enabled
  EmployeeTimekeepingLogs EmployeeTimekeepingLogs[]
  account                 Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  importBatch             TimekeepingImportBatch?   @relation(fields: [importBatchId], references: [id])
  task                    Task?                     @relation(fields: [taskId], references: [id])
  project                 Project?                  @relation(fields: [projectId], references: [id])
  device                  ManpowerDevice?           @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@index([importBatchId])
  @@index([accountId, taskId])
  @@index([accountId, createdAt])
  @@index([accountId, source])
  @@index([accountId, timeInLocation])
  @@index([accountId, timeOutLocation])
}

model AttendanceConflict {
  id                    Int                        @id @default(autoincrement())
  accountId             String
  employeeTimekeepingId Int?
  conflictType          AttendanceConflictType
  conflictDate          DateTime
  dateString            String
  description           String
  shiftInfo             Json?
  isResolved            Boolean                    @default(false)
  resolvedAt            DateTime?
  resolvedBy            String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  account               Account                    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  employeeTimekeeping   EmployeeTimekeeping?       @relation(fields: [employeeTimekeepingId], references: [id], onDelete: Cascade)
  ignoredBy             AttendanceConflictIgnore[]

  @@unique([accountId, dateString, conflictType])
  @@index([dateString, isResolved])
  @@index([accountId, isResolved])
}

model AttendanceConflictIgnore {
  id                 Int                      @id @default(autoincrement())
  conflictId         Int
  ignoredByAccountId String
  action             AttendanceConflictAction @default(IGNORED)
  ignoredAt          DateTime                 @default(now())
  conflict           AttendanceConflict       @relation(fields: [conflictId], references: [id], onDelete: Cascade)
  ignoredBy          Account                  @relation(fields: [ignoredByAccountId], references: [id], onDelete: Cascade)

  @@unique([conflictId, ignoredByAccountId])
  @@index([ignoredByAccountId])
}

model Queue {
  id                     Int         @id @default(autoincrement())
  name                   String
  type                   QueueType
  completePercentage     Float       @default(0)
  currentCount           Int         @default(0)
  totalCount             Int         @default(0)
  processPerBatch        Int         @default(10)
  status                 QueueStatus @default(PENDING)
  errorStatus            String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  fileId                 Int?
  queueSettings          Json        @default("{}")
  queueStatusDescription String      @default("")
  file                   Files?      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  QueueLogs              QueueLogs[]
}

model QueueLogs {
  id          Int            @id @default(autoincrement())
  queueId     Int
  message     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  params      Json           @default("{}")
  status      QueueLogStatus @default(PENDING)
  errorStatus String?
  queue       Queue          @relation(fields: [queueId], references: [id], onDelete: Cascade)
}

model Company {
  id                            Int                            @id @default(autoincrement())
  companyName                   String
  domainPrefix                  String
  isMain                        Boolean                        @default(false)
  createdAt                     DateTime                       @default(now())
  updatedAt                     DateTime                       @updatedAt
  businessType                  BusinessType                   @default(OTHERS)
  email                         String                         @default("")
  industry                      Industry                       @default(OTHERS)
  phone                         String                         @default("")
  registrationNo                String                         @default("")
  tinNo                         String                         @default("")
  website                       String                         @default("")
  hasInitializedLeaveTypes      Boolean                        @default(false)
  address                       String                         @default("")
  logoUrl                       String                         @default("")
  isActive                      Boolean                        @default(true)
  disabledModules               Json                           @default("[]")
  Account                       Account[]
  accountInvites                AccountInvite[]
  AllowanceConfiguration        AllowanceConfiguration[]
  AllowanceImportBatch          AllowanceImportBatch[]
  announcements                 Announcement[]
  Brand                         Brand[]
  Client                        Client[]
  ClientShareLink               ClientShareLink[]
  Collection                    Collection[]
  seedTracking                  CompanySeedTracking[]
  crmActivities                 CRMActivity[]
  Cutoff                        Cutoff[]
  dealSources                   DealSource[]
  dealTypes                     DealType[]
  DeductionConfiguration        DeductionConfiguration[]
  DeductionImportBatch          DeductionImportBatch[]
  Delivery                      Delivery[]
  DeviceLicense                 DeviceLicense[]
  Discussion                    Discussion[]
  EmployeeImportBatch           EmployeeImportBatch[]
  Equipment                     Equipment[]
  mediaFiles                    Files[]                        @relation("MediaFiles")
  FundAccount                   FundAccount[]
  Gate                          Gate[]
  GradeLevel                    GradeLevel[]
  Guardian                      Guardian[]
  individualScheduleAssignments IndividualScheduleAssignment[]
  Item                          Item[]
  ItemReceipt                   ItemReceipt[]
  leadCompanies                 LeadCompany[]                  @relation("LeadCompanies")
  leadDeals                     LeadDeal[]
  leadRelationshipOwners        LeadRelationshipOwner[]
  LeaveTypeConfiguration        LeaveTypeConfiguration[]
  LocalHoliday                  LocalHoliday[]
  Location                      Location[]
  mediaFolders                  MediaFolder[]
  PayrollApprovers              PayrollApprovers[]
  PayrollGroup                  PayrollGroup[]
  PettyCashHolders              PettyCashHolder[]
  Project                       Project[]
  RequestForPayment             RequestForPayment[]
  Task                          Task[]
  TaskPhase                     TaskPhase[]
  Role                          Role[]
  Schedule                      Schedule[]
  SchoolAttendance              SchoolAttendance[]
  SchoolSection                 SchoolSection[]
  SentEmail                     SentEmail[]
  Shift                         Shift[]
  Student                       Student[]
  Supplier                      Supplier[]
  teams                         Team[]
  teamScheduleAssignments       TeamScheduleAssignment[]
  TimekeepingImportBatch        TimekeepingImportBatch[]
  UserLevel                     UserLevel[]
  Warehouse                     Warehouse[]
  WorkflowTemplate              WorkflowTemplate[]
  ManpowerDevice                ManpowerDevice[]
  CalendarEvent                 CalendarEvent[]
  CalendarCategory              CalendarCategory[]
}

model DeductionConfiguration {
  id                   Int                      @id @default(autoincrement())
  name                 String
  category             DeductionCategory
  parentDeductionId    Int?
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  isDeleted            Boolean                  @default(false)
  companyId            Int
  company              Company                  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parentDeduction      DeductionConfiguration?  @relation("ParentChild", fields: [parentDeductionId], references: [id], onDelete: Cascade)
  childDeductions      DeductionConfiguration[] @relation("ParentChild")
  DeductionImportBatch DeductionImportBatch[]
  DeductionPlan        DeductionPlan[]

  @@unique([name, companyId], name: "uniqueDeductionNamePerCompany")
}

model DeductionPlan {
  id                                  Int                                   @id @default(autoincrement())
  name                                String
  deductionConfigurationId            Int
  accountId                           String
  monthlyAmortization                 Float                                 @default(0)
  totalPaidAmount                     Float                                 @default(0)
  totalAmount                         Float                                 @default(0)
  remainingBalance                    Float                                 @default(0)
  isOpen                              Boolean                               @default(true)
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @updatedAt
  deductionPeriod                     DeductionPeriod                       @default(EVERY_PERIOD)
  effectivityDate                     DateTime                              @default(now())
  isActive                            Boolean                               @default(true)
  DeductionImportTemp                 DeductionImportTemp[]
  account                             Account                               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  deductionConfiguration              DeductionConfiguration                @relation(fields: [deductionConfigurationId], references: [id], onDelete: Cascade)
  DeductionPlanHistory                DeductionPlanHistory[]
  EmployeeSalaryComputationDeductions EmployeeSalaryComputationDeductions[]

  @@unique([deductionConfigurationId, accountId])
}

model DeductionPlanHistory {
  id                Int                 @id @default(autoincrement())
  deductionPlanId   Int
  amount            Float               @default(0)
  beforeBalance     Float               @default(0)
  afterBalance      Float               @default(0)
  createdAt         DateTime            @default(now())
  transactionCode   FundTransactionCode @default(BEGINNING_BALANCE)
  remarks           String
  cutoffDateRangeId String?
  cutoffDateRange   CutoffDateRange?    @relation(fields: [cutoffDateRangeId], references: [id])
  deductionPlan     DeductionPlan       @relation(fields: [deductionPlanId], references: [id], onDelete: Cascade)

  @@index([cutoffDateRangeId])
}

model AllowanceConfiguration {
  id                   Int                    @id @default(autoincrement())
  name                 String
  category             AllowanceType
  parentDeductionId    Int?
  companyId            Int
  isDeleted            Boolean                @default(false)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  taxBasis             TaxBasis               @default(TAXABLE)
  company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  AllowanceImportBatch AllowanceImportBatch[]
  AllowancePlan        AllowancePlan[]

  @@unique([name, companyId], name: "uniqueAllowanceNamePerCompany")
}

model AllowancePlan {
  id                                  Int                                   @id @default(autoincrement())
  name                                String
  amount                              Float
  effectivityDate                     DateTime
  allowanceConfigurationId            Int
  isActive                            Boolean                               @default(true)
  accountId                           String
  createdAt                           DateTime                              @default(now())
  updatedAt                           DateTime                              @updatedAt
  deductionPeriod                     DeductionPeriod                       @default(EVERY_PERIOD)
  AllowanceImportTemp                 AllowanceImportTemp[]
  account                             Account                               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  allowanceConfiguration              AllowanceConfiguration                @relation(fields: [allowanceConfigurationId], references: [id], onDelete: Cascade)
  AllowancePlanHistory                AllowancePlanHistory[]
  EmployeeSalaryComputationAllowances EmployeeSalaryComputationAllowances[]
}

model AllowancePlanHistory {
  id                Int                 @id @default(autoincrement())
  allowancePlanId   Int
  transactionCode   FundTransactionCode @default(BEGINNING_BALANCE)
  amount            Float               @default(0)
  remarks           String
  beforeBalance     Float               @default(0)
  afterBalance      Float               @default(0)
  createdAt         DateTime            @default(now())
  cutoffDateRangeId String?
  allowancePlan     AllowancePlan       @relation(fields: [allowancePlanId], references: [id], onDelete: Cascade)
  cutoffDateRange   CutoffDateRange?    @relation(fields: [cutoffDateRangeId], references: [id])

  @@index([cutoffDateRangeId])
}

model PayrollFiling {
  id                     Int                 @id @default(autoincrement())
  filingType             PayrollFilingType   @default(OFFICIAL_BUSINESS_FORM)
  status                 PayrollFilingStatus @default(PENDING)
  accountId              String
  timeIn                 DateTime?
  timeOut                DateTime?
  date                   DateTime?
  hours                  Float?              @default(0)
  isApproved             Boolean             @default(false)
  approvedById           String?
  approvedAt             DateTime?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  remarks                String?
  fileId                 Int?
  leaveData              Json?
  shiftData              Json?
  approvalTaskId         Int?
  rejectReason           String?
  nightDifferentialHours Float?              @default(0)
  account                Account             @relation("FilingAccount", fields: [accountId], references: [id], onDelete: Cascade)
  approvedBy             Account?            @relation("FilingApprovedBy", fields: [approvedById], references: [id], onDelete: Cascade)
  file                   Files?              @relation(fields: [fileId], references: [id])
  shift                  Shift?
}

model Discussion {
  id                    String                  @id
  title                 String
  module                String
  targetId              String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  companyId             Int
  company               Company                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  DiscussionMessage     DiscussionMessage[]
  DiscussionMessageRead DiscussionMessageRead[]
  DiscussionWatchers    DiscussionWatchers[]

  @@unique([module, targetId, companyId])
}

model DiscussionWatchers {
  id           Int        @id @default(autoincrement())
  accountId    String
  discussionId String
  account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([accountId, discussionId])
}

model DiscussionMessage {
  discussionId          String
  activity              String
  content               String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  accountId             String
  id                    Int                     @id @default(autoincrement())
  attachmentId          Int?
  account               Account                 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  attachment            Files?                  @relation(fields: [attachmentId], references: [id])
  discussion            Discussion              @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  DiscussionMessageRead DiscussionMessageRead[]
}

model DiscussionMessageRead {
  id                Int               @id @default(autoincrement())
  accountId         String
  messageId         Int
  discussionId      String
  readAt            DateTime          @default(now())
  lastReadMessageId Int?
  account           Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  discussion        Discussion        @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  message           DiscussionMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([accountId, messageId])
  @@index([accountId, discussionId])
}

model PayrollApprovers {
  id            Int      @id @default(autoincrement())
  accountId     String
  companyId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  approvalLevel Int      @default(1)
  isActive      Boolean  @default(true)
  account       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, approvalLevel, accountId])
}

model PayrollApprovalHistory {
  id                Int             @id @default(autoincrement())
  cutoffDateRangeId String
  approverId        String
  action            String
  approvalLevel     Int
  remarks           String?
  approvedAt        DateTime        @default(now())
  approver          Account         @relation(fields: [approverId], references: [id], onDelete: Cascade)
  cutoffDateRange   CutoffDateRange @relation(fields: [cutoffDateRangeId], references: [id], onDelete: Cascade)
}

model OTPVerification {
  id        String   @id @default(uuid())
  accountId String
  otp       String
  type      String
  status    String   @default("PENDING")
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([otp])
}

model Conversation {
  id        Int                   @id @default(autoincrement())
  accountId String                @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  account   Account               @relation(fields: [accountId], references: [id], onDelete: Cascade)
  messages  ConversationMessage[]
}

model ConversationMessage {
  id             Int          @id @default(autoincrement())
  conversationId Int
  role           String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model UserLevel {
  id            Int             @id @default(autoincrement())
  label         String
  systemModule  SystemModule
  companyId     Int?
  scope         ScopeList[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  scopeJson     Json?
  RoleUserLevel RoleUserLevel[]
  company       Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model GovernmentPaymentHistory {
  id                          Int                       @id @default(autoincrement())
  type                        GovernmentPaymentType
  amount                      Float                     @default(0)
  employeeShare               Float                     @default(0)
  employerShare               Float                     @default(0)
  basis                       Float                     @default(0)
  cutoffDateRangeId           String
  employeeTimekeepingCutoffId Int
  accountId                   String
  isPosted                    Boolean                   @default(true)
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  employeeShareMPF            Float                     @default(0)
  employeeShareRegular        Float                     @default(0)
  employerShareEC             Float                     @default(0)
  employerShareMPF            Float                     @default(0)
  employerShareRegular        Float                     @default(0)
  account                     Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  cutoffDateRange             CutoffDateRange           @relation(fields: [cutoffDateRangeId], references: [id], onDelete: Cascade)
  employeeTimekeepingCutoff   EmployeeTimekeepingCutoff @relation(fields: [employeeTimekeepingCutoffId], references: [id], onDelete: Cascade)

  @@index([cutoffDateRangeId])
  @@index([accountId])
  @@index([type])
}

model EmployeeImportBatch {
  id            String               @id @default(uuid())
  fileName      String
  uploadedBy    String
  companyId     Int
  totalRows     Int                  @default(0)
  validRows     Int                  @default(0)
  processedRows Int                  @default(0)
  failedRows    Int                  @default(0)
  status        String               @default("uploading")
  startedAt     DateTime             @default(now())
  completedAt   DateTime?
  company       Company              @relation(fields: [companyId], references: [id])
  account       Account              @relation(fields: [uploadedBy], references: [id])
  tempRecords   EmployeeImportTemp[]

  @@index([companyId, startedAt])
}

model EmployeeImportTemp {
  id                 Int                 @id @default(autoincrement())
  importBatchId      String
  rowNumber          Int
  employeeCode       String
  lastName           String
  firstName          String
  middleName         String?
  username           String
  email              String
  contactNumber      String
  role               String
  reportsTo          String?
  monthlyRate        Float
  startDate          DateTime
  endDate            DateTime?
  branch             String
  scheduleCode       String
  payrollGroupCode   String
  isValid            Boolean             @default(false)
  hasWarnings        Boolean             @default(false)
  validationErrors   Json?
  validationWarnings Json?
  isApproved         Boolean             @default(false)
  approvedBy         String?
  approvedAt         DateTime?
  status             String              @default("pending")
  createdAt          DateTime            @default(now())
  existingAccountId  String?
  isUpdate           Boolean             @default(false)
  bankAccountNumber  String?
  bankName           String?
  birthdate          DateTime?
  city               String?
  civilStatus        String?
  country            String?
  employmentStatus   String
  hdmfNumber         String?
  phcNumber          String?
  postalCode         String?
  sex                String?
  sssNumber          String?
  stateProvince      String?
  street             String?
  tinNumber          String?
  zipCode            String?
  importBatch        EmployeeImportBatch @relation(fields: [importBatchId], references: [id])

  @@index([importBatchId])
  @@index([employeeCode])
}

model EmployeeSalaryAdjustment {
  id                Int                  @id @default(autoincrement())
  accountId         String
  cutoffDateRangeId String
  adjustmentType    SalaryAdjustmentType
  configurationId   Int
  title             String
  amount            Decimal              @db.Decimal(10, 2)
  isActive          Boolean              @default(true)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  account           Account              @relation(fields: [accountId], references: [id])
  cutoffDateRange   CutoffDateRange      @relation(fields: [cutoffDateRangeId], references: [id])

  @@index([accountId])
  @@index([cutoffDateRangeId])
  @@index([configurationId])
}

model LeaveTypeConfiguration {
  id          Int                      @id @default(autoincrement())
  name        String
  code        String
  description String?
  parentId    Int?
  isActive    Boolean                  @default(true)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  companyId   Int?
  leavePlans  LeavePlan[]
  company     Company?                 @relation(fields: [companyId], references: [id])
  parent      LeaveTypeConfiguration?  @relation("LeaveTypeHierarchy", fields: [parentId], references: [id])
  children    LeaveTypeConfiguration[] @relation("LeaveTypeHierarchy")

  @@unique([code, companyId])
  @@index([parentId])
  @@index([code])
  @@index([companyId])
}

model LeavePlan {
  id                             Int                    @id @default(autoincrement())
  leaveTypeConfigurationId       Int
  planName                       String
  canCarryOver                   Boolean                @default(false)
  maxCarryOverCredits            Int?
  canConvertToCash               Boolean                @default(false)
  maxCashConversionCredits       Int?
  canFileSameDay                 Boolean                @default(false)
  allowLateFiling                Boolean                @default(true)
  advanceFilingDays              Int?
  maxConsecutiveDays             Int?
  canFileAgainstFutureCredits    Boolean                @default(false)
  maxAdvanceFilingDays           Int?
  isAttachmentMandatory          Boolean                @default(false)
  totalUpfrontCredits            Decimal                @default(0) @db.Decimal(10, 2)
  monthlyAccrualCredits          Decimal                @default(0) @db.Decimal(10, 2)
  isActive                       Boolean                @default(true)
  createdAt                      DateTime               @default(now())
  updatedAt                      DateTime               @updatedAt
  customRenewalDate              DateTime?
  renewalType                    LeaveRenewalType       @default(HIRING_ANNIVERSARY)
  consecutiveFilingDays          Int?
  isLimitedConsecutiveFilingDays Boolean                @default(false)
  employeeLeavePlans             EmployeeLeavePlan[]
  leaveTypeConfiguration         LeaveTypeConfiguration @relation(fields: [leaveTypeConfigurationId], references: [id])

  @@index([leaveTypeConfigurationId])
}

model EmployeeLeavePlan {
  id                       Int                  @id @default(autoincrement())
  leavePlanId              Int
  accountId                String
  effectiveDate            DateTime
  currentCredits           Decimal              @default(0) @db.Decimal(10, 2)
  usedCredits              Decimal              @default(0) @db.Decimal(10, 2)
  carriedCredits           Decimal              @default(0) @db.Decimal(10, 2)
  isActive                 Boolean              @default(true)
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  customRenewalDate        DateTime?
  monthlyAccrualCredits    Decimal              @db.Decimal(10, 2)
  renewalType              LeaveRenewalType     @default(HIRING_ANNIVERSARY)
  totalAnnualCredits       Decimal              @db.Decimal(10, 2)
  monthDayCreditsAccrual   Int                  @default(22)
  leaveCreditsGivenUpfront Decimal              @default(0) @db.Decimal(10, 2)
  employee                 EmployeeData         @relation(fields: [accountId], references: [accountId])
  leavePlan                LeavePlan            @relation(fields: [leavePlanId], references: [id])
  leaveCreditHistory       LeaveCreditHistory[]

  @@unique([leavePlanId, accountId])
  @@index([accountId])
  @@index([leavePlanId])
}

model LeaveCreditHistory {
  id                  Int               @id @default(autoincrement())
  employeeLeavePlanId Int
  transactionType     String
  amount              Decimal           @db.Decimal(10, 2)
  balanceBefore       Decimal           @db.Decimal(10, 2)
  balanceAfter        Decimal           @db.Decimal(10, 2)
  reason              String
  referenceId         String?
  createdBy           String
  createdAt           DateTime          @default(now())
  employeeLeavePlan   EmployeeLeavePlan @relation(fields: [employeeLeavePlanId], references: [id])

  @@index([employeeLeavePlanId])
  @@index([createdAt])
}

model BranchTimekeepingStatus {
  id                String          @id @default(uuid())
  branchId          Int
  cutoffDateRangeId String
  isReady           Boolean         @default(false)
  markedReadyBy     String?
  markedReadyAt     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  branch            Project         @relation(fields: [branchId], references: [id])
  cutoffDateRange   CutoffDateRange @relation(fields: [cutoffDateRangeId], references: [id])
  markedBy          Account?        @relation(fields: [markedReadyBy], references: [id])

  @@unique([branchId, cutoffDateRangeId])
  @@index([cutoffDateRangeId])
}

model GradeLevel {
  id             Int             @id @default(autoincrement())
  code           String
  name           String
  educationLevel EducationLevel
  sequence       Int
  ageRangeMin    Int?
  ageRangeMax    Int?
  description    String?
  companyId      Int?
  isActive       Boolean         @default(true)
  isDeleted      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  company        Company?        @relation(fields: [companyId], references: [id])
  sections       SchoolSection[]

  @@unique([code, companyId])
  @@index([companyId])
  @@index([educationLevel])
}

model SchoolSection {
  id           String   @id @default(uuid())
  name         String // "Section A", "Rose", "Diamond"
  gradeLevelId Int // Link to GradeLevel entity
  adviserName  String // "Mr. John Smith" (plain text)
  schoolYear   String // "2024-2025"
  capacity     Int? // Optional: max students
  companyId    Int
  isActive     Boolean  @default(true)
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company    Company    @relation(fields: [companyId], references: [id])
  gradeLevel GradeLevel @relation(fields: [gradeLevelId], references: [id])
  students   Student[]

  @@unique([name, gradeLevelId, schoolYear, companyId])
  @@index([companyId])
  @@index([gradeLevelId])
}

model Student {
  id                           String               @id @default(uuid())
  studentNumber                String
  lrn                          String?
  sectionId                    String?
  profilePhotoId               Int?
  dateRegistered               DateTime             @default(now())
  searchKeyword                String?
  isActive                     Boolean              @default(true)
  isDeleted                    Boolean              @default(false)
  createdAt                    DateTime             @default(now())
  updatedAt                    DateTime             @updatedAt
  companyId                    Int
  dateOfBirth                  DateTime
  firstName                    String
  gender                       String
  lastName                     String
  middleName                   String?
  temporaryGuardianName        String?
  temporaryGuardianAddress     String?
  temporaryGuardianContactNumber String?
  schoolNotifications          SchoolNotification[]
  company                      Company              @relation(fields: [companyId], references: [id])
  section                      SchoolSection?       @relation(fields: [sectionId], references: [id])
  profilePhoto                 Files?               @relation(fields: [profilePhotoId], references: [id])
  guardians                    StudentGuardian[]

  @@unique([studentNumber, companyId])
  @@unique([lrn, companyId])
  @@index([studentNumber])
  @@index([lrn])
  @@index([companyId])
  @@index([searchKeyword])
  @@index([sectionId])
}

model Guardian {
  id                      String                 @id @default(uuid())
  firstName               String
  lastName                String
  middleName              String?
  email                   String                 @unique
  contactNumber           String
  alternateNumber         String?
  address                 String?
  occupation              String?
  companyId               Int
  isDeleted               Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  dateOfBirth             DateTime
  isActive                Boolean                @default(true)
  key                     Bytes
  lastLogin               DateTime?
  password                String
  searchKeyword           String?
  appVersion              String?
  deviceTokens            String[]
  lastAppLogin            DateTime?
  notificationPreferences Json?
  preferredLanguage       String                 @default("en")
  passwordHash            String?                @db.VarChar(255)
  company                 Company                @relation(fields: [companyId], references: [id])
  guardianNotifications   GuardianNotification[]
  tokens                  GuardianToken[]
  schoolNotifications     SchoolNotification[]
  students                StudentGuardian[]

  @@unique([email, companyId])
  @@index([companyId])
  @@index([email])
  @@index([searchKeyword])
}

model StudentGuardian {
  id           String   @id @default(uuid())
  studentId    String
  guardianId   String
  relationship String
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guardian     Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, guardianId])
}

model DeviceLicense {
  id              Int               @id @default(autoincrement())
  licenseKey      String            @unique
  companyId       Int
  isActive        Boolean           @default(true)
  dateFirstUsed   DateTime?
  dateLastUsed    DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  gateId          String?
  connectedDevice DeviceConnection?
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  gate            Gate?             @relation(fields: [gateId], references: [id])

  @@index([companyId])
  @@index([licenseKey])
  @@index([gateId])
}

model DeviceConnection {
  id                 Int           @id @default(autoincrement())
  licenseId          Int           @unique
  deviceName         String
  macAddress         String
  ipAddress          String?
  isConnected        Boolean       @default(true)
  lastSeen           DateTime      @default(now())
  deviceInfo         Json?
  connectionCount    Int           @default(1)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  lastGuardianSyncAt DateTime?
  lastStudentSyncAt  DateTime?
  syncSettings       Json?
  license            DeviceLicense @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  syncHistories      SyncHistory[]

  @@index([macAddress])
  @@index([licenseId])
}

model SyncHistory {
  id                 Int              @id @default(autoincrement())
  deviceConnectionId Int
  syncType           String
  entityType         String
  recordsFetched     Int
  syncStartTime      DateTime
  syncEndTime        DateTime
  status             String
  error              String?
  createdAt          DateTime         @default(now())
  deviceConnection   DeviceConnection @relation(fields: [deviceConnectionId], references: [id], onDelete: Cascade)

  @@index([deviceConnectionId, createdAt])
}

model SchoolAttendance {
  id           String    @id @default(uuid())
  qrCode       String
  personId     String
  personType   String
  personName   String
  action       String
  timestamp    DateTime
  deviceId     String?
  location     String?
  syncedAt     DateTime?
  companyId    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  profilePhoto String?
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, timestamp])
  @@index([personId])
  @@index([qrCode])
  @@index([syncedAt])
}

model Gate {
  id             String          @id @default(cuid())
  gateName       String
  companyId      Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  deviceLicenses DeviceLicense[]
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([deletedAt])
}

model GuardianToken {
  id           String   @id @default(uuid())
  guardianId   String
  token        String   @unique
  refreshToken String   @unique
  deviceId     String?
  deviceInfo   Json?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  isRevoked    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  guardian     Guardian @relation(fields: [guardianId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([refreshToken])
  @@index([guardianId])
  @@index([expiresAt])
}

model GuardianNotification {
  id         String    @id @default(uuid())
  guardianId String
  type       String
  title      String
  message    String
  data       Json?
  priority   String    @default("normal")
  readAt     DateTime?
  createdAt  DateTime  @default(now())
  guardian   Guardian  @relation(fields: [guardianId], references: [id], onDelete: Cascade)

  @@index([guardianId, readAt])
  @@index([guardianId, type])
  @@index([createdAt])
}

model SchoolNotification {
  id             String    @id @default(uuid())
  type           String
  title          String    @db.VarChar(255)
  message        String
  timestamp      DateTime  @default(now())
  read           Boolean   @default(false)
  studentId      String?
  studentName    String?   @db.VarChar(255)
  guardianId     String
  actionUrl      String?   @db.VarChar(500)
  actionText     String?   @db.VarChar(100)
  priority       String    @default("medium")
  imageUrl       String?   @db.VarChar(500)
  pushSent       Boolean   @default(false)
  pushSentAt     DateTime?
  deliveryStatus String    @default("pending")
  metadata       Json?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  readAt         DateTime?
  expiresAt      DateTime?
  guardian       Guardian  @relation(fields: [guardianId], references: [id], onDelete: Cascade)
  student        Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@index([guardianId, timestamp])
  @@index([studentId])
  @@index([type])
  @@index([guardianId, read])
  @@index([priority, timestamp])
  @@index([expiresAt])
}

model WorkflowTemplate {
  id            Int                    @id @default(autoincrement())
  companyId     Int
  name          String
  code          String
  description   String?
  isActive      Boolean                @default(true)
  isDefault     Boolean                @default(false)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
  deletedById   String?
  isDeleted     Boolean                @default(false)
  buttonConfigs WorkflowButtonConfig[]
  instances     WorkflowInstance[]
  stages        WorkflowStage[]
  company       Company                @relation(fields: [companyId], references: [id])
  deletedBy     Account?               @relation("WorkflowTemplateDeletedBy", fields: [deletedById], references: [id])

  @@index([companyId])
  @@index([code])
  @@index([isDeleted, companyId])
  @@index([companyId, code, isDeleted])
}

model WorkflowStage {
  id               Int                  @id @default(autoincrement())
  workflowId       Int
  name             String
  key              String
  description      String?
  color            String
  textColor        String
  sequence         Int
  isInitial        Boolean              @default(false)
  isFinal          Boolean              @default(false)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  assigneeId       String?
  assigneeType     AssigneeType?
  position         Json?
  historyFrom      WorkflowHistory[]    @relation("HistoryFromStage")
  historyTo        WorkflowHistory[]    @relation("HistoryToStage")
  currentInstances WorkflowInstance[]   @relation("CurrentStage")
  workflow         WorkflowTemplate     @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowTasks    WorkflowTask[]       @relation("WorkflowTaskStage")
  transitionsFrom  WorkflowTransition[] @relation("FromStage")
  transitionsTo    WorkflowTransition[] @relation("ToStage")

  @@unique([workflowId, key])
  @@unique([workflowId, sequence])
  @@index([workflowId])
  @@index([assigneeId])
}

model WorkflowTransition {
  id                 Int               @id @default(autoincrement())
  fromStageId        Int
  toStageId          Int?
  conditionType      String?
  conditionData      Json?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  transitionType     TransitionType    @default(APPROVAL)
  buttonName         String?
  customDialogConfig Json?
  dialogType         String?
  buttonColor        String?
  fromSide           String?
  toSide             String?
  history            WorkflowHistory[]
  fromStage          WorkflowStage     @relation("FromStage", fields: [fromStageId], references: [id], onDelete: Cascade)
  toStage            WorkflowStage?    @relation("ToStage", fields: [toStageId], references: [id], onDelete: Cascade)

  @@unique([fromStageId, toStageId, transitionType])
  @@index([fromStageId])
  @@index([toStageId])
}

model WorkflowInstance {
  id                   Int                    @id @default(autoincrement())
  workflowId           Int
  currentStageId       Int
  sourceModule         String
  sourceId             String
  status               WorkflowInstanceStatus @default(ACTIVE)
  startedAt            DateTime               @default(now())
  completedAt          DateTime?
  startedById          String
  metadata             Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  PettyCashLiquidation PettyCashLiquidation?
  history              WorkflowHistory[]
  currentStage         WorkflowStage          @relation("CurrentStage", fields: [currentStageId], references: [id])
  startedBy            Account                @relation("WorkflowStartedBy", fields: [startedById], references: [id])
  workflow             WorkflowTemplate       @relation(fields: [workflowId], references: [id])
  tasks                WorkflowTask[]

  @@unique([sourceModule, sourceId])
  @@index([workflowId])
  @@index([currentStageId])
  @@index([status])
}

model WorkflowHistory {
  id            Int                 @id @default(autoincrement())
  instanceId    Int
  fromStageId   Int?
  toStageId     Int
  transitionId  Int?
  action        String
  performedById String
  performedAt   DateTime            @default(now())
  remarks       String?
  metadata      Json?
  fromStage     WorkflowStage?      @relation("HistoryFromStage", fields: [fromStageId], references: [id])
  instance      WorkflowInstance    @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  performedBy   Account             @relation("WorkflowHistoryPerformer", fields: [performedById], references: [id])
  toStage       WorkflowStage       @relation("HistoryToStage", fields: [toStageId], references: [id])
  transition    WorkflowTransition? @relation(fields: [transitionId], references: [id])

  @@index([instanceId])
  @@index([performedById])
}

model WorkflowTask {
  id          Int              @id @default(autoincrement())
  instanceId  Int
  taskId      Int              @unique
  stageId     Int
  createdAt   DateTime         @default(now())
  completedAt DateTime?
  instance    WorkflowInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  stage       WorkflowStage    @relation("WorkflowTaskStage", fields: [stageId], references: [id])
  task        Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([instanceId])
  @@index([taskId])
}

model WorkflowButtonConfig {
  id                   Int              @id @default(autoincrement())
  templateId           Int
  transitionCode       String
  buttonLabel          String
  buttonColor          String
  buttonIcon           String?
  buttonSize           String           @default("medium")
  confirmationRequired Boolean          @default(false)
  confirmationTitle    String?
  confirmationMessage  String?
  remarkRequired       Boolean          @default(false)
  remarkPrompt         String?
  position             Int              @default(0)
  visibility           String           @default("ALWAYS")
  customClass          String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  template             WorkflowTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, transitionCode])
  @@index([templateId])
}

model EmailApprovalToken {
  id           String    @id @unique @default(uuid())
  token        String    @unique
  taskId       Int
  approverId   String
  sourceModule String
  sourceId     String
  action       String
  templateData Json
  isUsed       Boolean   @default(false)
  usedAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  approver     Account   @relation(fields: [approverId], references: [id], onDelete: Cascade)
  task         Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([taskId])
}

model SentEmail {
  id            String   @id @unique @default(uuid())
  companyId     Int
  sentBy        String?
  sentAt        DateTime @default(now())
  module        String
  moduleContext String?
  to            Json
  cc            Json?
  bcc           Json?
  subject       String
  htmlContent   String?
  textContent   String?
  status        String
  errorMessage  String?
  messageId     String?
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  company       Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  sentByAccount Account? @relation(fields: [sentBy], references: [id], onDelete: Cascade)

  @@index([companyId, sentAt])
  @@index([module])
  @@index([status])
}

model AccountInvite {
  id                String    @id @unique @default(uuid())
  email             String    @db.VarChar(100)
  firstName         String    @db.VarChar(100)
  lastName          String    @db.VarChar(100)
  roleId            String
  parentAccountId   String?
  inviteToken       String    @unique @db.VarChar(100)
  inviteTokenExpiry DateTime
  invitedById       String
  companyId         Int
  isAccepted        Boolean   @default(false)
  acceptedAt        DateTime?
  accountId         String?   @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  account           Account?  @relation("AccountInvite", fields: [accountId], references: [id])
  company           Company   @relation(fields: [companyId], references: [id])
  invitedBy         Account   @relation("InvitesSent", fields: [invitedById], references: [id])
  parentAccount     Account?  @relation("InvitedChildren", fields: [parentAccountId], references: [id])
  role              Role      @relation(fields: [roleId], references: [id])

  @@index([inviteToken])
  @@index([email])
  @@index([companyId])
}

model LeadRelationshipOwner {
  id          Int      @id @default(autoincrement())
  accountId   String   @unique
  isActive    Boolean  @default(true)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   Int?
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  company     Company? @relation(fields: [companyId], references: [id])
  createdBy   Account  @relation("LeadRelationshipOwnerCreatedBy", fields: [createdById], references: [id])

  @@index([accountId])
  @@index([companyId])
}

model DealSource {
  id          Int        @id @default(autoincrement())
  sourceName  String
  isActive    Boolean    @default(true)
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companyId   Int?
  company     Company?   @relation(fields: [companyId], references: [id])
  createdBy   Account    @relation("DealSourceCreatedBy", fields: [createdById], references: [id])
  leadDeals   LeadDeal[]

  @@unique([sourceName, companyId])
  @@index([sourceName])
  @@index([companyId])
}

model DealType {
  id          Int        @id @default(autoincrement())
  typeName    String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  companyId   Int?
  createdById String?
  company     Company?   @relation(fields: [companyId], references: [id])
  createdBy   Account?   @relation("DealTypeCreatedBy", fields: [createdById], references: [id])
  leadDeals   LeadDeal[]

  @@unique([typeName, companyId])
  @@index([typeName])
  @@index([companyId])
}

model LeadCompany {
  id              Int              @id @default(autoincrement())
  name            String
  employees       Int              @default(0)
  deals           Int              @default(0)
  dateCreated     DateTime         @default(now())
  createdBy       String
  isActive        Boolean          @default(true)
  updatedAt       DateTime         @updatedAt
  companyId       Int?
  company         Company?         @relation("LeadCompanies", fields: [companyId], references: [id])
  pointsOfContact PointOfContact[]

  @@index([name])
  @@index([companyId])
}

model PointOfContact {
  id          Int         @id @default(autoincrement())
  fullName    String      @db.VarChar(200)
  email       String      @db.VarChar(200)
  phone       String?     @db.VarChar(50)
  jobTitle    String?     @db.VarChar(100)
  companyId   Int
  isActive    Boolean     @default(true)
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  leadDeals   LeadDeal[]
  company     LeadCompany @relation(fields: [companyId], references: [id])
  createdBy   Account     @relation("PointOfContactCreatedBy", fields: [createdById], references: [id])

  @@unique([email, companyId])
  @@index([fullName])
  @@index([email])
  @@index([companyId])
}

model LeadDeal {
  id                      Int             @id @default(autoincrement())
  dealName                String          @db.VarChar(255)
  dealTypeId              Int?
  approvedBudgetContract  Float           @default(0)
  monthlyRecurringRevenue Float           @default(0)
  implementationFee       Float           @default(0)
  totalContract           Float           @default(0)
  closeDate               DateTime
  winProbability          Int             @default(50)
  locationId              String?
  dealSourceId            Int?
  relationshipOwnerId     String?
  pointOfContactId        Int?
  status                  LeadDealStatus  @default(OPPORTUNITY)
  companyId               Int?
  createdById             String
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  isDeleted               Boolean         @default(false)
  company                 Company?        @relation(fields: [companyId], references: [id])
  createdBy               Account         @relation("LeadDealCreatedBy", fields: [createdById], references: [id])
  dealSource              DealSource?     @relation(fields: [dealSourceId], references: [id])
  dealType                DealType?       @relation(fields: [dealTypeId], references: [id])
  location                Location?       @relation(fields: [locationId], references: [id])
  pointOfContact          PointOfContact? @relation(fields: [pointOfContactId], references: [id])
  relationshipOwner       Account?        @relation("LeadDealRelationshipOwner", fields: [relationshipOwnerId], references: [id])

  @@index([dealName])
  @@index([closeDate])
  @@index([companyId, isDeleted])
  @@index([status])
}

model CRMActivity {
  id            Int                @id @default(autoincrement())
  activityType  CRMActivityType
  entityType    CRMEntityType
  entityId      Int
  entityName    String             @db.VarChar(255)
  description   String
  performedById String
  isRead        Boolean            @default(false)
  createdAt     DateTime           @default(now())
  companyId     Int?
  company       Company?           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  performedBy   Account            @relation("CRMActivityPerformedBy", fields: [performedById], references: [id], onDelete: Cascade)

  @@index([companyId, createdAt])
  @@index([performedById])
  @@index([isRead])
  @@index([entityType, entityId])
}

model Announcement {
  id              Int                          @id @default(autoincrement())
  title           String                       @db.VarChar(200)
  content         String
  icon            String                       @default("campaign") @db.VarChar(50)
  iconColor       String                       @default("#615FF6") @db.VarChar(20)
  priority        AnnouncementPriority         @default(MEDIUM)
  isActive        Boolean                      @default(true)
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  createdById     String
  companyId       Int?
  type            String                       @default("general") @db.VarChar(50)
  company         Company?                     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdBy       Account                      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  acknowledgments AnnouncementAcknowledgment[]
  views           AnnouncementView[]

  @@index([createdAt])
  @@index([isActive])
  @@index([companyId])
}

model AnnouncementView {
  id             Int          @id @default(autoincrement())
  announcementId Int
  viewedById     String
  viewedAt       DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  viewedBy       Account      @relation(fields: [viewedById], references: [id], onDelete: Cascade)

  @@unique([announcementId, viewedById])
  @@index([viewedAt])
}

model AnnouncementAcknowledgment {
  id               Int          @id @default(autoincrement())
  announcementId   Int
  acknowledgedById String
  acknowledgedAt   DateTime     @default(now())
  acknowledgedBy   Account      @relation(fields: [acknowledgedById], references: [id], onDelete: Cascade)
  announcement     Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([announcementId, acknowledgedById])
  @@index([acknowledgedAt])
}

model AllowanceImportBatch {
  id                       String                 @id @default(uuid())
  fileName                 String
  uploadedBy               String
  companyId                Int
  allowanceConfigurationId Int
  totalRows                Int                    @default(0)
  validRows                Int                    @default(0)
  warningRows              Int                    @default(0)
  errorRows                Int                    @default(0)
  processedRows            Int                    @default(0)
  failedRows               Int                    @default(0)
  status                   String                 @default("uploading")
  startedAt                DateTime               @default(now())
  completedAt              DateTime?
  allowanceConfiguration   AllowanceConfiguration @relation(fields: [allowanceConfigurationId], references: [id])
  company                  Company                @relation(fields: [companyId], references: [id])
  account                  Account                @relation(fields: [uploadedBy], references: [id])
  tempRecords              AllowanceImportTemp[]

  @@index([companyId, startedAt])
  @@index([allowanceConfigurationId])
  @@index([status])
}

model AllowanceImportTemp {
  id                     Int                  @id @default(autoincrement())
  importBatchId          String
  rowNumber              Int
  employeeCode           String
  allowanceAmount        Decimal              @db.Decimal(10, 2)
  allowancePeriod        DeductionPeriod
  effectivityDate        DateTime
  proRatedAllowance      Boolean              @default(false)
  isValid                Boolean              @default(true)
  validationErrors       Json?
  validationWarnings     Json?
  isApproved             Boolean              @default(false)
  isProcessed            Boolean              @default(false)
  processedAt            DateTime?
  processingError        String?
  createdAllowancePlanId Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  createdAllowancePlan   AllowancePlan?       @relation(fields: [createdAllowancePlanId], references: [id])
  importBatch            AllowanceImportBatch @relation(fields: [importBatchId], references: [id], onDelete: Cascade)

  @@index([importBatchId])
  @@index([employeeCode])
  @@index([isValid])
  @@index([isProcessed])
}

model DeductionImportBatch {
  id                       String                 @id @default(uuid())
  fileName                 String
  uploadedBy               String
  companyId                Int
  deductionConfigurationId Int
  totalRows                Int                    @default(0)
  validRows                Int                    @default(0)
  warningRows              Int                    @default(0)
  errorRows                Int                    @default(0)
  processedRows            Int                    @default(0)
  failedRows               Int                    @default(0)
  status                   String                 @default("uploading")
  startedAt                DateTime               @default(now())
  completedAt              DateTime?
  company                  Company                @relation(fields: [companyId], references: [id])
  deductionConfiguration   DeductionConfiguration @relation(fields: [deductionConfigurationId], references: [id])
  account                  Account                @relation(fields: [uploadedBy], references: [id])
  tempRecords              DeductionImportTemp[]

  @@index([companyId, startedAt])
  @@index([deductionConfigurationId])
  @@index([status])
}

model DeductionImportTemp {
  id                     Int                  @id @default(autoincrement())
  importBatchId          String
  rowNumber              Int
  employeeCode           String
  loanAmount             Decimal?             @db.Decimal(10, 2)
  monthlyAmortization    Decimal              @db.Decimal(10, 2)
  deductionPeriod        DeductionPeriod
  effectivityDate        DateTime
  isValid                Boolean              @default(true)
  validationErrors       Json?
  validationWarnings     Json?
  isApproved             Boolean              @default(false)
  isProcessed            Boolean              @default(false)
  processedAt            DateTime?
  processingError        String?
  createdDeductionPlanId Int?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  createdDeductionPlan   DeductionPlan?       @relation(fields: [createdDeductionPlanId], references: [id])
  importBatch            DeductionImportBatch @relation(fields: [importBatchId], references: [id], onDelete: Cascade)

  @@index([importBatchId])
  @@index([employeeCode])
  @@index([isValid])
  @@index([isProcessed])
}

model IndividualScheduleAssignment {
  id          Int      @id @default(autoincrement())
  employeeId  String
  date        String
  projectId   Int?
  shiftId     Int?
  updatedAt   DateTime @updatedAt
  updatedById String
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  employee    Account  @relation("IndividualScheduleAssignments", fields: [employeeId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id])
  shift       Shift?   @relation(fields: [shiftId], references: [id])
  updatedBy   Account  @relation("UpdatedIndividualSchedules", fields: [updatedById], references: [id], onDelete: Cascade)

  @@unique([employeeId, date, companyId])
  @@index([date, companyId])
  @@index([employeeId, date])
}

model TeamScheduleAssignment {
  id          Int      @id @default(autoincrement())
  teamId      Int
  date        String
  projectId   Int?
  shiftId     Int?
  updatedAt   DateTime @updatedAt
  updatedById String
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project     Project? @relation(fields: [projectId], references: [id])
  shift       Shift?   @relation(fields: [shiftId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  updatedBy   Account  @relation("UpdatedTeamSchedules", fields: [updatedById], references: [id], onDelete: Cascade)

  @@unique([teamId, date, companyId])
  @@index([date, companyId])
  @@index([teamId, date])
}

model TimekeepingImportBatch {
  id              String                   @id @default(uuid())
  fileName        String
  uploadedBy      String
  companyId       Int
  totalRows       Int                      @default(0)
  validRows       Int                      @default(0)
  warningRows     Int                      @default(0)
  errorRows       Int                      @default(0)
  overlappingRows Int                      @default(0)
  processedRows   Int                      @default(0)
  failedRows      Int                      @default(0)
  status          String                   @default("uploading")
  startedAt       DateTime                 @default(now())
  completedAt     DateTime?
  rawLogs         EmployeeTimekeepingRaw[]
  company         Company                  @relation(fields: [companyId], references: [id])
  account         Account                  @relation(fields: [uploadedBy], references: [id])
  tempRecords     TimekeepingImportTemp[]

  @@index([companyId, startedAt])
  @@index([status])
}

model TimekeepingImportTemp {
  id                 Int                    @id @default(autoincrement())
  importBatchId      String
  rowNumber          Int
  employeeCode       String
  employeeName       String?
  accountId          String?
  timeIn             DateTime
  timeOut            DateTime
  remarks            String?
  validationErrors   Json?
  validationWarnings Json?
  overlappingLogs    Json?
  hasOverlap         Boolean                @default(false)
  isValid            Boolean                @default(true)
  isProcessed        Boolean                @default(false)
  isApproved         Boolean                @default(false)
  createdAt          DateTime               @default(now())
  importBatch        TimekeepingImportBatch @relation(fields: [importBatchId], references: [id], onDelete: Cascade)

  @@index([importBatchId])
  @@index([employeeCode])
  @@index([isValid])
  @@index([isProcessed])
  @@index([hasOverlap])
}

model CompanySeedTracking {
  id           Int       @id @default(autoincrement())
  companyId    Int
  seederType   String
  status       String
  seedDate     DateTime?
  errorMessage String?
  metadata     Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, seederType])
}

model Team {
  id                  Int                      @id @default(autoincrement())
  name                String
  companyId           Int
  isActive            Boolean                  @default(true)
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  company             Company                  @relation(fields: [companyId], references: [id])
  members             TeamMember[]
  scheduleAssignments TeamScheduleAssignment[]

  @@unique([name, companyId])
  @@index([companyId])
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  accountId String   @unique
  joinedAt  DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model SystemMigration {
  id           String          @id @default(cuid())
  name         String          @unique
  version      String
  description  String
  status       MigrationStatus @default(PENDING)
  executedAt   DateTime?
  executedBy   String?
  environment  String
  errorMessage String?
  metadata     Json?
  rollbackable Boolean         @default(false)
  rolledBackAt DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model MediaFolder {
  id        Int           @id @default(autoincrement())
  name      String
  parentId  Int?
  path      String
  companyId Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  module    ModuleType    @default(CMS)
  files     Files[]
  company   Company       @relation(fields: [companyId], references: [id])
  parent    MediaFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  MediaFolder[] @relation("FolderHierarchy")

  @@unique([companyId, module, path])
  @@index([companyId, module])
  @@index([companyId, module, parentId])
}

model ManpowerDevice {
  id                      String                    @id @default(uuid())
  deviceId                String                    @unique
  name                    String
  location                String                    @default("")
  companyId               Int
  projectId               Int?                      // Optional branch/project ID
  apiKey                  String                    @unique
  isActive                Boolean                   @default(true)
  lastActivityAt          DateTime?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  company                 Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project                 Project?                  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  EmployeeTimekeepingRaw  EmployeeTimekeepingRaw[]
}

enum AssigneeType {
  DEPARTMENT
  ROLE
  SPECIFIC_USER
  DIRECT_SUPERVISOR
}

enum TransitionType {
  APPROVAL
  CONDITIONAL
}

enum WorkflowInstanceStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum PaymentTerms {
  CASH_ON_DELIVERY
  PAYMENT_UPON_INVOICE
  POST_DATED_CHECK
  DATED_DELIVERY_UPON_PAYMENT
  NO_PAYMENT_TERMS
}

enum PurchaseRequestStatus {
  SUPPLIER_OUTSOURCING
  MATERIALS_APPROVAL
  CANVASSING
  SUPPLIER_SELECTION
  PURCHASE_ORDER
}

enum PurchaseOrderStatus {
  OPEN
  CLOSE
}

enum Status {
  DEPLOYED
  FLOATING
}

enum AccountType {
  STAFF
  STUDENT
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
}

enum MigrationStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  ROLLED_BACK
  SKIPPED
}

enum ProjectStatus {
  PROJECT
  LEAD
  BRANCH
}

enum BoardLaneKeys {
  BACKLOG
  IN_PROGRESS
  DONE
}

enum TaskAssignMode {
  SELF
  OTHER
  ROLE_GROUP
}

enum TaskWatcherType {
  CREATOR
  ASSIGNEE
  WATCHER
}

enum TaskType {
  NORMAL
  APPROVAL
  REVIEW
  NOTIFICATION
}

enum TaskPhaseStatus {
  DRAFT
  ACTIVE
  COMPLETED
}

enum WarehouseType {
  COMPANY_WAREHOUSE
  PROJECT_WAREHOUSE
  IN_TRANSIT_WAREHOUSE
  TEMPORARY_WAREHOUSE
}

enum TransactionType {
  REFILL
  WRITEOFF
  DELIVERY
}

enum BillOfQuantityStatus {
  PENDING
  APPROVED
  REJECTED
  LOCKED
}

enum ApprovalStatus {
  NO_ITEM
  PENDING
  APPROVED
  REJECTED
}

enum BoqType {
  HEADING
  SUBHEADING
  ITEM
  SUBTOTAL
  BLANK_ROW
}

enum ParticularType {
  INVENTORY
  MANPOWER
  EQUIPMENT
}

enum EquipmentType {
  VEHICLE
  TOOL
}

enum EquipmentState {
  WORKING
  FOR_REPAIR
  REPAIRED
}

enum maintenanceCycle {
  NONE
  MONTHLY
  YEARLY
}

enum repairStages {
  PENDING_REPAIR
  UNDER_REPAIR
  REPAIR_CONFIRMATION
  DONE_REPAIR
}

enum TruckLoadStage {
  FOR_SECURING
  FOR_PACKING
  FOR_LOADING
  FOR_DELIVERY
  OUT_FOR_DELIVERY
}

enum DeliveryStatus {
  PENDING
  CANCELED
  DELIVERED
  INCOMPLETE
  TRUCK_LOAD
  FOR_PICKUP
}

enum TaxType {
  NO_TAX
  VAT
}

enum ItemReceiptType {
  PURCHASE_ORDER
  PURCHASE_REQUEST
  REFILL_INVENTORY
  WRITEOFF_INVENTORY
  TRANSFER_INVENTORY_FROM
  TRANSFER_INVENTORY_TO
  IN_TRANSIT_LOADED
  RESERVED_FOR_TRANSFER
  FOR_DELIVERY_DEDUCTION
  FOR_DELIVERY_INCREMENT
  IN_TRANSIT_UNLOADED
  ITEM_DELIVERED
}

enum DeliveryTerms {
  PICKUP
  DELIVERY
}

enum FundAccountType {
  CASH
  BANK
  CHECK
  EWALLET
}

enum FundTransactionType {
  ADD
  SUBTRACT
}

enum FundTransactionCode {
  MANUAL_ADD
  MANUAL_DEDUCT
  BEGINNING_BALANCE
  FUND_TRANSFER_FROM
  FUND_TRANSFER_TO
  TRANSACTION_FEE
  PURCHASE_ORDER_PAYMENT
  RFP
  RFP_RELEASED
  COLLECTION
  INITIAL_LOAN_BALANCE
  ADD_LOAN_BALANCE
  SUBTRACT_LOAN_BALANCE
  PETTY_CASH_ASSIGNMENT
  PETTY_CASH_REFILL
  PETTY_CASH_RETURN
}

enum FileType {
  IMAGE
  DOCUMENT
  VIDEO
  AUDIO
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EmployeeDocumentCategory {
  EMPLOYMENT
  GOVERNMENT_LEGAL
  EDUCATION_PROFESSIONAL
  MEDICAL_HEALTH
  PERFORMANCE_DISCIPLINARY
  COMPENSATION_BENEFITS
  EXIT_DOCUMENTS
  OTHER
}

enum PayeeType {
  SUPPLIER
  CLIENT
  EMPLOYEE
  GOVERNMENT
  OTHER
}

enum RequestForPaymentStatus {
  PAYMENT_APPROVAL
  PREPARATION
  RELEASE_APPROVAL
  FOR_RELEASING
  PAYMENT_RELEASED
  REJECTED
}

enum PettyCashLiquidationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PettyCashTransactionType {
  INITIAL
  REFILL
  DEDUCTION
  LIQUIDATION
  RETURN
  TRANSFER
}

enum CollectionType {
  DOWNPAYMENT
  PROGRESSIVE
  RETENTION
}

enum HolidayType {
  REGULAR
  SPECIAL
}

enum ShiftType {
  REST_DAY
  EXTRA_DAY
  TIME_BOUND
  FLEXITIME
}

enum ShiftPurpose {
  REGULAR
  EMPLOYEE_ADJUSTMENT
  TEAM_OVERRIDE
}

enum CutoffType {
  WEEKLY
  SEMIMONTHLY
  MONTHLY
}

enum CutoffPeriodType {
  FIRST_PERIOD
  LAST_PERIOD
  MIDDLE_PERIOD
}

enum CutoffDateRangeStatus {
  TIMEKEEPING
  PENDING
  PROCESSED
  APPROVED
  REJECTED
  POSTED
}

enum SalaryRateType {
  DAILY_RATE
  FIXED_RATE
  MONTHLY_RATE
}

enum DeductionPeriod {
  FIRST_PERIOD
  LAST_PERIOD
  EVERY_PERIOD
  NOT_DEDUCTED
}

enum DeductionType {
  BASED_ON_SALARY
  NOT_DEDUCTED
  CUSTOM
}

enum DeductionTargetBasis {
  BASIC_SALARY
  BASIC_PAY
  PRO_RATED_BASIC_PAY
  GROSS_PAY
}

enum EmploymentStatus {
  REGULAR
  CONTRACTTUAL
  PROBATIONARY
  TRAINEE
}

enum EmployeeTimekeepingSourceType {
  MANUAL
  COMPUTED
  COMPUTED_MODIFIED
}

enum ActiveShiftType {
  NONE
  REGULAR_SHIFT
  MANUAL_SCHEDULE
  SCHEDULE_ADJUSTMENT
  INDIVIDUAL_SCHEDULE
  TEAM_SCHEDULE
}

enum EmployeeSalaryComputationStage {
  PENDING
  COMPUTED
  FOR_APPROVAL
  APPROVED
  RELEASED
}

enum BreakdownType {
  UNDEFINED
  LATE
  WORK_TIME
  NIGHT_DIFFERENTIAL
  NIGHT_DIFFERENTIAL_OVERTIME
  OVERTIME
  UNDERTIME
  BREAK_TIME
}

enum TimekeepingSource {
  MANUAL
  SYSTEM
  BIOMETRICS
  CERTIFICATE_OF_ATTENDANCE
  OFFICIAL_BUSINESS
  TIMER
  EXCEL_IMPORTATION
  DEVICE
}

enum AttendanceConflictType {
  MISSING_LOG
  MISSING_TIME_OUT
  NO_ATTENDANCE
}

enum AttendanceConflictAction {
  IGNORED
  RESOLVED
}

enum QueueType {
  EMPLOYEE_IMPORTATION
  TIMEKEEPING_PROCESSING
  PAYROLL_PROCESSING
  PAYROLL_POSTING
}

enum QueueStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  INITIALIZING
  INCOMPLETE
}

enum QueueLogStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum BusinessType {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  CORPORATION
  OTHERS
}

enum Industry {
  CONSTRUCTION
  MANUFACTURING
  RETAIL
  SERVICES
  OTHERS
}

enum DeductionCategory {
  LOAN
  DEDUCTION
  DEMINIMIS
}

enum AllowanceType {
  DEMINIMIS
  TAXABLE
  NON_TAXABLE
}

enum TaxBasis {
  TAXABLE
  NON_TAXABLE
}

enum PayrollFilingType {
  OFFICIAL_BUSINESS_FORM
  CERTIFICATE_OF_ATTENDANCE
  OVERTIME
  SCHEDULE_ADJUSTMENT
  LEAVE
}

enum PayrollFilingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum EmailProtocol {
  POP3
  IMAP
  SMTP
}

enum WinProbability {
  UNKNOWN
  VERY_HIGH
  HIGH
  MEDIUM
  LOW
  VERY_LOW
}

enum EmailProvider {
  GMAIL
  OUTLOOK
  YAHOO
  CUSTOM
}

enum SystemModule {
  PROJECT
  MANPOWER
  TREASURY
  CALENDAR
  LEADS
  SETTINGS
  ASSET
  SCHOOL
}

enum ScopeList {
  DASHBOARD_TASK_WIDGET
  DASHBOARD_UPDATE_WIDGET
  DASHBOARD_PAYROLL_FILING_WIDGET
  MANPOWER_ACCESS
  MANPOWER_HRIS_ACCESS
  MANPOWER_HRIS_CREATE
  MANPOWER_HRIS_UPDATE
  MANPOWER_HRIS_DELETE
  MANPOWER_PAYROLL_CENTER_ACCESS
  MANPOWER_TIME_IMPORTATION_ACCESS
  MANPOWER_PAYROLL_SUBMIT_FOR_REVIEW
  MANPOWER_PAYROLL_PROCESS_FOR_REVIEW
  MANPOWER_PAYROLL_SUBMIT_POSTING
  MANPOWER_PAYSLIP_CENTER_ACCESS
  MANPOWER_TEAM_ATTENDANCE_ACCESS
  MANPOWER_CONFIGURATION_SERVICE_INCLUSIVE_LEAVE_ACCESS
  MANPOWER_TEAM_SHIFTS_ACCESS
  MANPOWER_TIME_KEEPING_ACCESS_ALL
  MANPOWER_TIME_KEEPING_ACCESS_BY_BRANCH
  MANPOWER_TIME_KEEPING_CREATE_RAW_LOGS
  MANPOWER_TIME_KEEPING_DELETE_RAW_LOGS
  MANPOWER_TIME_KEEPING_EDIT_TIME
  MANPOWER_TIME_KEEPING_APPROVE_REST_DAY
  MANPOWER_TIME_KEEPING_APPROVE_OVERTIME
  MANPOWER_TIME_KEEPING_RECOMPUTE_TIME
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_ACCESS
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_CREATE
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_UPDATE
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_DELETE
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_VIEW
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_VIEW_ALL
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_VIEW_BY_BRANCH
  MANPOWER_CONFIGURATION_PAYROLL_GROUP_VIEW_BY_EMPLOYEE
  MANPOWER_CONFIGURATION_LOCAL_HOLIDAY_ACCESS
  MANPOWER_CONFIGURATION_LOCAL_HOLIDAY_CREATE
  MANPOWER_CONFIGURATION_LOCAL_HOLIDAY_UPDATE
  MANPOWER_CONFIGURATION_LOCAL_HOLIDAY_DELETE
  MANPOWER_CONFIGURATION_NATIONAL_HOLIDAY_ACCESS
  MANPOWER_CONFIGURATION_NATIONAL_HOLIDAY_CREATE
  MANPOWER_CONFIGURATION_NATIONAL_HOLIDAY_UPDATE
  MANPOWER_CONFIGURATION_NATIONAL_HOLIDAY_DELETE
  MANPOWER_CONFIGURATION_PAGIBIG_ACCESS
  MANPOWER_CONFIGURATION_PAYROLL_APPROVERS_ACCESS
  MANPOWER_CONFIGURATION_PAYROLL_APPROVERS_CREATE
  MANPOWER_CONFIGURATION_PAYROLL_APPROVERS_UPDATE
  MANPOWER_CONFIGURATION_PAYROLL_APPROVERS_DELETE
  MANPOWER_CONFIGURATION_PHILHEALTH_ACCESS
  MANPOWER_CONFIGURATION_SCHEDULE_ACCESS
  MANPOWER_CONFIGURATION_SCHEDULE_CREATE
  MANPOWER_CONFIGURATION_SCHEDULE_UPDATE
  MANPOWER_CONFIGURATION_SCHEDULE_DELETE
  MANPOWER_CONFIGURATION_SHIFT_ACCESS
  MANPOWER_CONFIGURATION_SHIFT_CREATE
  MANPOWER_CONFIGURATION_SHIFT_UPDATE
  MANPOWER_CONFIGURATION_SHIFT_DELETE
  MANPOWER_CONFIGURATION_SSS_ACCESS
  MANPOWER_CONFIGURATION_TAX_ACCESS
  MANPOWER_CONFIGURATION_DEDUCTION_ACCESS
  MANPOWER_CONFIGURATION_DEDUCTION_CREATE
  MANPOWER_CONFIGURATION_DEDUCTION_UPDATE
  MANPOWER_CONFIGURATION_DEDUCTION_DELETE
  MANPOWER_CONFIGURATION_ALLOWANCE_ACCESS
  MANPOWER_CONFIGURATION_ALLOWANCE_CREATE
  MANPOWER_CONFIGURATION_ALLOWANCE_UPDATE
  MANPOWER_CONFIGURATION_ALLOWANCE_DELETE
  MANPOWER_CONFIGURATION_CUTOFF_ACCESS
  MANPOWER_CONFIGURATION_CUTOFF_CREATE
  MANPOWER_CONFIGURATION_CUTOFF_UPDATE
  MANPOWER_CONFIGURATION_CUTOFF_DELETE
  MANPOWER_TIME_KEEPING_DEVICE_ACCESS
  PROJECT_ACCESS
  ASSET_ACCESS
  TREASURY_ACCESS
  CALENDAR_ACCESS
  LEADS_ACCESS
  SETTINGS_ACCESS
  SETTINGS_COMPANY_ACCESS
  SETTINGS_BRANCHES_ACCESS
  SETTINGS_USER_ACCESS
  SETTINGS_ROLE_GROUP_ACCESS
  SETTINGS_ROLES_ACCESS
  SETTINGS_USER_LEVEL_ACCESS
  SETTINGS_DEVELOPER_PROMOTION_ACCESS
  SETTINGS_EMAIL_ACCESS
  MANPOWER_REPORTS_SSS_ACCESS
  MANPOWER_REPORTS_PHILHEALTH_ACCESS
  MANPOWER_REPORTS_PAGIBIG_ACCESS
  MANPOWER_REPORTS_TAX_ACCESS
  SCHOOL_MANAGEMENT_ACCESS
  SCHOOL_STUDENT_MANAGEMENT_ACCESS
  SCHOOL_GUARDIAN_MANAGEMENT_ACCESS
  SCHOOL_DEVICE_MANAGEMENT_ACCESS
  SCHOOL_ACADEMIC_SETUP_ACCESS
  SCHOOL_YEAR_MANAGEMENT_ACCESS
  SCHOOL_GRADE_LEVEL_ACCESS
  SCHOOL_SECTION_MANAGEMENT_ACCESS
  SCHOOL_COURSE_MANAGEMENT_ACCESS
  SCHOOL_ACADEMIC_OPERATIONS_ACCESS
  SCHOOL_ENROLLMENT_ACCESS
  SCHOOL_ATTENDANCE_ACCESS
  SCHOOL_GRADING_ACCESS
  SCHOOL_PEOPLE_MANAGEMENT_ACCESS
  SETTINGS_SYSTEM_EMAILS_ACCESS
  MANPOWER_TEAM_MANAGEMENT_ACCESS
}

enum GovernmentPaymentType {
  SSS
  PHILHEALTH
  PAGIBIG
  WITHHOLDING_TAX
}

enum SalaryAdjustmentType {
  ALLOWANCE
  DEDUCTION
  SALARY
}

enum LeaveRenewalType {
  HIRING_ANNIVERSARY
  START_OF_YEAR
  MONTHLY
  CUSTOM_DATE
}

enum EducationLevel {
  NURSERY
  KINDERGARTEN
  ELEMENTARY
  JUNIOR_HIGH
  SENIOR_HIGH
  COLLEGE
}

enum ModuleType {
  PROJECTS
  ASSETS
  CALENDAR
  MANPOWER
  CRM
  TREASURY
  CMS
  SCHOOL
}

enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadDealStatus {
  OPPORTUNITY
  CONTACTED
  TECHNICAL_MEETING
  PROPOSAL
  IN_NEGOTIATION
  WIN
  LOST
}

enum CRMActivityType {
  CREATE
  UPDATE
  STAGE_CHANGE
  DELETE
}

enum CRMEntityType {
  LEAD
  LEAD_DEAL
  CLIENT
  LEAD_COMPANY
  POINT_OF_CONTACT
  DEAL_TYPE
  DEAL_SOURCE
}

// OAuth 2.0 Models
model OAuthClient {
  id           String   @id @default(cuid())
  clientId     String   @unique
  clientSecret String
  name         String
  redirectUris String[]
  grantTypes   String[]
  scopes       String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model OAuthCode {
  id          String   @id @default(cuid())
  code        String   @unique
  clientId    String
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  redirectUri String
  scopes      String[]
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model OAuthToken {
  id           String   @id @default(cuid())
  accessToken  String   @unique
  refreshToken String?  @unique
  clientId     String
  accountId    String
  account      Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  scopes       String[]
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ========================================
// Calendar Models
// ========================================

// Main Calendar Events Table
model CalendarEvent {
  id               String                    @id @default(uuid())
  title            String
  description      String?
  location         String?
  startDateTime    DateTime
  endDateTime      DateTime
  allDay           Boolean                   @default(false)
  colorCode        String                    @default("#2196F3")
  categoryId       Int?
  creatorId        String
  isActive         Boolean                   @default(true)
  visibility       String                    @default("private") // private, public, team
  companyId        Int
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt

  // Relations
  creator          Account                   @relation("EventCreator", fields: [creatorId], references: [id])
  category         CalendarCategory?         @relation(fields: [categoryId], references: [id])
  company          Company                   @relation(fields: [companyId], references: [id])
  attendees        CalendarEventAttendee[]
  attachments      CalendarEventAttachment[]
  recurrence       CalendarEventRecurrence?
  instances        CalendarEventInstance[]
  reminders        CalendarEventReminder[]

  @@index([creatorId, startDateTime])
  @@index([categoryId])
  @@index([companyId])
}

// Recurrence Rules Table (Google Calendar style)
model CalendarEventRecurrence {
  id               String            @id @default(uuid())
  eventId          String            @unique
  recurrenceType   String            // daily, weekly, monthly, yearly, custom
  frequency        Int               @default(1) // every X days/weeks/months
  interval         String?           // MO,TU,WE,TH,FR,SA,SU
  byDay            String[]          // ["MO", "WE", "FR"]
  byMonthDay       Int[]             // [1, 15] for 1st and 15th
  byMonth          Int[]             // [1, 6, 12] for Jan, Jun, Dec
  count            Int?              // number of occurrences
  until            DateTime?         // end date
  exceptions       String[]          // dates to skip (ISO format)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  event            CalendarEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

// Event Instances (for recurring events)
model CalendarEventInstance {
  id               String            @id @default(uuid())
  parentEventId    String
  instanceDate     DateTime
  originalStart    DateTime
  originalEnd      DateTime

  // Override fields (if this instance is modified)
  title            String?
  description      String?
  location         String?
  startDateTime    DateTime?
  endDateTime      DateTime?
  colorCode        String?
  isCancelled      Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  parentEvent      CalendarEvent     @relation(fields: [parentEventId], references: [id], onDelete: Cascade)

  @@unique([parentEventId, instanceDate])
  @@index([parentEventId, instanceDate])
}

// Event Attendees
model CalendarEventAttendee {
  id               String            @id @default(uuid())
  eventId          String
  accountId        String
  email            String?
  responseStatus   String            @default("pending") // pending, accepted, declined, tentative
  isOrganizer      Boolean           @default(false)
  isOptional       Boolean           @default(false)
  addedAt          DateTime          @default(now())
  respondedAt      DateTime?

  event            CalendarEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  account          Account           @relation("EventAttendee", fields: [accountId], references: [id])

  @@unique([eventId, accountId])
  @@index([eventId])
  @@index([accountId])
}

// Calendar Categories
model CalendarCategory {
  id               Int               @id @default(autoincrement())
  name             String
  colorCode        String
  icon             String?
  description      String?
  isSystem         Boolean           @default(false)
  creatorId        String?
  companyId        Int
  isActive         Boolean           @default(true)
  sortOrder        Int               @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  events           CalendarEvent[]
  creator          Account?          @relation("CategoryCreator", fields: [creatorId], references: [id])
  company          Company           @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
  @@index([creatorId])
  @@index([companyId])
}

// Event Attachments
model CalendarEventAttachment {
  id               String            @id @default(uuid())
  eventId          String
  fileName         String
  fileUrl          String
  fileSize         Int
  mimeType         String
  uploadedBy       String
  uploadedAt       DateTime          @default(now())

  event            CalendarEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  uploader         Account           @relation("EventAttachmentUploader", fields: [uploadedBy], references: [id])

  @@index([eventId])
}

// Event Reminders
model CalendarEventReminder {
  id               String            @id @default(uuid())
  eventId          String
  method           String            @default("popup") // popup, email, notification
  minutes          Int               @default(15) // minutes before event
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  event            CalendarEvent     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}
