#!/bin/bash

set -e  # Exit on error

echo "=== Redis Installation Script for Ubuntu 24.04 ==="
echo "This will install and configure Redis for production use"
echo ""

# Generate a strong random password
REDIS_PASSWORD=$(openssl rand -base64 32)

echo "Step 1/6: Updating system packages..."
apt-get update -qq

echo "Step 2/6: Installing Redis Stack Server..."
curl -fsSL https://packages.redis.io/gpg | gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/redis.list
apt-get update -qq
apt-get install -y redis-stack-server

echo "Step 3/6: Configuring Redis..."
# Backup original config
cp /etc/redis-stack.conf /etc/redis-stack.conf.backup

# Configure Redis for production
cat > /etc/redis-stack.conf <<EOF
# Redis Stack Configuration
# Generated by install-redis.sh

# Network
bind 0.0.0.0
port 6379
protected-mode yes

# Security
requirepass $REDIS_PASSWORD

# General
daemonize no
supervised systemd
pidfile /var/run/redis/redis-stack-server.pid
loglevel notice
logfile /var/log/redis/redis-stack-server.log

# Databases
databases 16

# Snapshotting (persistence)
save 900 1      # Save after 900 sec if at least 1 key changed
save 300 10     # Save after 300 sec if at least 10 keys changed
save 60 10000   # Save after 60 sec if at least 10000 keys changed
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes
dbfilename dump.rdb
dir /var/lib/redis-stack

# Memory Management
maxmemory 768mb
maxmemory-policy allkeys-lru
maxmemory-samples 5

# Append Only File (AOF) - better durability
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec
no-appendfsync-on-rewrite no
auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# Slow Log
slowlog-log-slower-than 10000
slowlog-max-len 128

# Latency Monitor
latency-monitor-threshold 100

# Client Management
timeout 300
tcp-keepalive 60
maxclients 10000
EOF

echo "Step 4/6: Setting up firewall..."
# Install UFW if not already installed
apt-get install -y ufw

# Allow SSH first (important!)
ufw allow 22/tcp

# We'll configure Redis port access after deployment
# For now, allow all (will be restricted later)
ufw allow 6379/tcp

# Enable firewall
echo "y" | ufw enable

echo "Step 5/6: Starting Redis..."
systemctl daemon-reload
systemctl enable redis-stack-server
systemctl restart redis-stack-server

# Wait for Redis to start
sleep 3

echo "Step 6/6: Verifying installation..."
if redis-cli -a "$REDIS_PASSWORD" PING | grep -q "PONG"; then
    echo ""
    echo "✓✓✓ Redis installation successful! ✓✓✓"
    echo ""
    echo "=== IMPORTANT: Save these credentials ==="
    echo ""
    echo "REDIS_HOST: $(hostname -I | awk '{print $1}')"
    echo "REDIS_PORT: 6379"
    echo "REDIS_PASSWORD: $REDIS_PASSWORD"
    echo ""
    echo "=== Database Allocation ==="
    echo "Database 0: Production"
    echo "Database 1: Staging"
    echo "Database 2: Development"
    echo ""
    echo "=== Next Steps ==="
    echo "1. Save the REDIS_PASSWORD above (you won't see it again!)"
    echo "2. Update your backend environment variables"
    echo "3. Configure firewall to allow only backend IPs:"
    echo "   ufw delete allow 6379/tcp"
    echo "   ufw allow from <STAGING_IP> to any port 6379"
    echo "   ufw allow from <PRODUCTION_IP> to any port 6379"
    echo ""
    echo "=== Quick Test Commands ==="
    echo "redis-cli -a '$REDIS_PASSWORD' INFO"
    echo "redis-cli -a '$REDIS_PASSWORD' -n 0 PING  # Test production DB"
    echo "redis-cli -a '$REDIS_PASSWORD' -n 1 PING  # Test staging DB"
    echo ""
else
    echo ""
    echo "✗ Redis installation failed!"
    echo "Check logs: journalctl -u redis-stack-server -n 50"
    exit 1
fi
