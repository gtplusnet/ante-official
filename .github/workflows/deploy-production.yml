name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

jobs:
  detect-changes:
    runs-on: [self-hosted, staging]
    outputs:
      frontend-main-changed: 'true'
      gate-app-changed: 'true'
      guardian-app-changed: 'true'
      website-multibook-changed: 'true'
      backend-changed: 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Production deployment - deploy all components
        run: |
          echo "Production deployment triggered - all components will be deployed"
          echo "This ensures consistency across all production services"

  notify-start:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-main-changed == 'true' || needs.detect-changes.outputs.gate-app-changed == 'true' || needs.detect-changes.outputs.guardian-app-changed == 'true' || needs.detect-changes.outputs.website-multibook-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: [self-hosted, staging]
    steps:
      - name: Send deployment start notification
        run: |
          MESSAGE="üöÄ *ANTE ERP - PRODUCTION Deployment Started*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üë§ *Triggered by:* ${{ github.actor }}%0A"
          MESSAGE="${MESSAGE}üè∑Ô∏è *Release:* ${{ github.event.release.tag_name }}%0A"
          MESSAGE="${MESSAGE}üìù *Release Name:* ${{ github.event.release.name }}%0A%0A"

          if [ "${{ needs.detect-changes.outputs.frontend-main-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üè¢ Frontend Main (ERP) will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.gate-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üö™ Gate App will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.guardian-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üë®‚Äçüë©‚Äçüëß Guardian App will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.website-multibook-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üìö Website Multibook will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚öôÔ∏è Backend API will be deployed%0A"
            MESSAGE="${MESSAGE}üóÑÔ∏è Database migrations will be applied%0A"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  run-migrations:
    needs: [detect-changes, notify-start]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: [self-hosted, staging]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        run: |
          cd backend
          yarn install --frozen-lockfile --production=false

      - name: Run Prisma migrations
        run: |
          cd backend
          echo "üóÑÔ∏è Applying Prisma migrations to production database..."
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}

      - name: Generate Prisma client
        run: |
          cd backend
          echo "üì¶ Generating Prisma client..."
          npx prisma generate

      - name: Send migration success notification
        if: success()
        run: |
          MESSAGE="‚úÖ *Database Migration Successful*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üóÑÔ∏è All Prisma migrations applied to production database%0A"
          MESSAGE="${MESSAGE}üì¶ Prisma client generated successfully%0A"
          MESSAGE="${MESSAGE}‚è≠Ô∏è Proceeding with backend deployment..."

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

      - name: Send migration failure notification
        if: failure()
        run: |
          MESSAGE="‚ùå *Database Migration FAILED*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üö® Failed to apply Prisma migrations to production database%0A"
          MESSAGE="${MESSAGE}üõë Backend deployment will be blocked%0A"
          MESSAGE="${MESSAGE}üîó *Logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  deploy-frontend-main:
    needs: [detect-changes, notify-start, run-migrations]
    if: |
      always() &&
      needs.detect-changes.outputs.frontend-main-changed == 'true' &&
      (needs.run-migrations.result == 'success' || needs.run-migrations.result == 'skipped')
    runs-on: [self-hosted, staging]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Prepare production environment
        run: |
          cd frontends/frontend-main
          cp environment/env.production .env
          echo "‚úÖ Copied env.production to .env"
          cat .env

      - name: Deploy Frontend Main to Vercel (Production)
        run: |
          cd frontends/frontend-main
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND_MAIN }}

  deploy-gate-app:
    needs: [detect-changes, notify-start, run-migrations]
    if: |
      always() &&
      needs.detect-changes.outputs.gate-app-changed == 'true' &&
      (needs.run-migrations.result == 'success' || needs.run-migrations.result == 'skipped')
    runs-on: [self-hosted, staging]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deploy Gate App to Vercel
        run: |
          cd frontends/frontend-gate-app
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_GATE_APP }}

  deploy-guardian-app:
    needs: [detect-changes, notify-start, run-migrations]
    if: |
      always() &&
      needs.detect-changes.outputs.guardian-app-changed == 'true' &&
      (needs.run-migrations.result == 'success' || needs.run-migrations.result == 'skipped')
    runs-on: [self-hosted, staging]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deploy Guardian App to Vercel
        run: |
          cd frontends/frontend-guardian-app
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_GUARDIAN_APP }}

  deploy-website-multibook:
    needs: [detect-changes, notify-start, run-migrations]
    if: |
      always() &&
      needs.detect-changes.outputs.website-multibook-changed == 'true' &&
      (needs.run-migrations.result == 'success' || needs.run-migrations.result == 'skipped')
    runs-on: [self-hosted, staging]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deploy Website Multibook to Vercel (Production)
        run: |
          cd websites/multibook
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEBSITE_MULTIBOOK }}

  build-and-deploy-backend:
    needs: [detect-changes, notify-start, run-migrations]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: [self-hosted, staging]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ante-backend-production
          tags: |
            type=raw,value=latest
            type=ref,event=tag
            type=sha,prefix=prod-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production-alpine

      - name: Trigger DigitalOcean deployment
        run: |
          echo "Triggering PRODUCTION deployment for app ${{ secrets.DO_APP_ID_PRODUCTION }}..."

          RESPONSE=$(curl -s -X POST \
            "https://api.digitalocean.com/v2/apps/${{ secrets.DO_APP_ID_PRODUCTION }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.DO_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"force_build": false}')

          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.deployment.id // empty')

          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Error: Failed to trigger deployment"
            echo "$RESPONSE" | jq '.'
            exit 1
          fi

          echo "PRODUCTION Deployment triggered successfully!"
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "View deployment: https://cloud.digitalocean.com/apps/${{ secrets.DO_APP_ID_PRODUCTION }}/deployments/$DEPLOYMENT_ID"

  notify:
    needs: [detect-changes, run-migrations, deploy-frontend-main, deploy-gate-app, deploy-guardian-app, deploy-website-multibook, build-and-deploy-backend]
    if: always()
    runs-on: [self-hosted, staging]
    steps:
      - name: Send deployment result notification
        run: |
          MESSAGE="üìä *ANTE ERP - PRODUCTION Deployment Results*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üîó *Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}%0A%0A"

          # Database migration status
          if [ "${{ needs.run-migrations.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Database Migrations:* Successfully applied%0A%0A"
          elif [ "${{ needs.run-migrations.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Database Migrations:* FAILED - Backend deployment blocked%0A%0A"
          elif [ "${{ needs.run-migrations.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Database Migrations:* Skipped (error in workflow)%0A%0A"
          fi

          # Frontend Main deployment status
          if [ "${{ needs.deploy-frontend-main.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Frontend Main (ERP):* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://ante-main-production.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-frontend-main.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Frontend Main (ERP):* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-frontend-main.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.frontend-main-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Frontend Main (ERP):* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Gate App deployment status
          if [ "${{ needs.deploy-gate-app.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Gate App:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://ante-gate-production.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-gate-app.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Gate App:* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-gate-app.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.gate-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Gate App:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Guardian App deployment status
          if [ "${{ needs.deploy-guardian-app.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Guardian App:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://ante-guardian-production.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-guardian-app.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Guardian App:* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-guardian-app.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.guardian-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Guardian App:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Website Multibook deployment status
          if [ "${{ needs.deploy-website-multibook.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Website Multibook:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://multibook.com.ph%0A%0A"
          elif [ "${{ needs.deploy-website-multibook.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Website Multibook:* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-website-multibook.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.website-multibook-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Website Multibook:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Backend deployment status
          if [ "${{ needs.build-and-deploy-backend.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Backend API:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://ante-backend-production-gael2.ondigitalocean.app%0A%0A"
          elif [ "${{ needs.build-and-deploy-backend.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Backend API:* Deployment failed%0A%0A"
          elif [ "${{ needs.build-and-deploy-backend.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Backend API:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Overall status
          if [ "${{ needs.run-migrations.result }}" == "success" ] || [ "${{ needs.deploy-frontend-main.result }}" == "success" ] || [ "${{ needs.deploy-gate-app.result }}" == "success" ] || [ "${{ needs.deploy-guardian-app.result }}" == "success" ] || [ "${{ needs.deploy-website-multibook.result }}" == "success" ] || [ "${{ needs.build-and-deploy-backend.result }}" == "success" ]; then
            if [ "${{ needs.run-migrations.result }}" == "failure" ] || [ "${{ needs.deploy-frontend-main.result }}" == "failure" ] || [ "${{ needs.deploy-gate-app.result }}" == "failure" ] || [ "${{ needs.deploy-guardian-app.result }}" == "failure" ] || [ "${{ needs.deploy-website-multibook.result }}" == "failure" ] || [ "${{ needs.build-and-deploy-backend.result }}" == "failure" ]; then
              MESSAGE="${MESSAGE}‚ö†Ô∏è *Status:* Partial Success"
            else
              MESSAGE="${MESSAGE}üéâ *Status:* All deployments successful!"
            fi
          else
            MESSAGE="${MESSAGE}üö® *Status:* Deployment failed - needs immediate attention!"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"
