name: Deploy to Vercel

on:
  push:
    branches: [main]
    paths:
      - 'frontends/frontend-main/**'
      - 'frontends/frontend-gate-app/**'
      - 'frontends/frontend-guardian-app/**'
      - 'backend/**'
      - 'package.json'
      - 'yarn.lock'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-main-changed: ${{ steps.changes.outputs.frontend-main }}
      gate-app-changed: ${{ steps.changes.outputs.gate-app }}
      guardian-app-changed: ${{ steps.changes.outputs.guardian-app }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend-main:
              - 'frontends/frontend-main/**'
              - 'package.json'
              - 'yarn.lock'
            gate-app:
              - 'frontends/frontend-gate-app/**'
              - 'package.json'
              - 'yarn.lock'
            guardian-app:
              - 'frontends/frontend-guardian-app/**'
              - 'package.json'
              - 'yarn.lock'
            backend:
              - 'backend/**'
              - 'package.json'
              - 'yarn.lock'

  notify-start:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-main-changed == 'true' || needs.detect-changes.outputs.gate-app-changed == 'true' || needs.detect-changes.outputs.guardian-app-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Send deployment start notification
        run: |
          MESSAGE="üöÄ *ANTE ERP - Deployment Started*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üë§ *Triggered by:* ${{ github.actor }}%0A"
          MESSAGE="${MESSAGE}üîÄ *Branch:* ${{ github.ref_name }}%0A"
          MESSAGE="${MESSAGE}üí¨ *Commit:* ${{ github.event.head_commit.message }}%0A%0A"

          if [ "${{ needs.detect-changes.outputs.frontend-main-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üè¢ Frontend Main (ERP) will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.gate-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üö™ Gate App will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.guardian-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}üë®‚Äçüë©‚Äçüëß Guardian App will be deployed%0A"
          fi

          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚öôÔ∏è Backend API will be deployed%0A"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  deploy-frontend-main:
    needs: [detect-changes, notify-start]
    if: needs.detect-changes.outputs.frontend-main-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Copy staging environment config
        run: |
          cd frontends/frontend-main
          cp environment/env.staging .env
          echo "Environment file configured:"
          cat .env

      - name: Deploy Frontend Main to Vercel
        run: |
          cd frontends/frontend-main
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND_MAIN }}

  deploy-gate-app:
    needs: [detect-changes, notify-start]
    if: needs.detect-changes.outputs.gate-app-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deploy Gate App to Vercel
        run: |
          cd frontends/frontend-gate-app
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_GATE_APP }}

  deploy-guardian-app:
    needs: [detect-changes, notify-start]
    if: needs.detect-changes.outputs.guardian-app-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Deploy Guardian App to Vercel
        run: |
          cd frontends/frontend-guardian-app
          npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_GUARDIAN_APP }}

  build-and-deploy-backend:
    needs: [detect-changes, notify-start]
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/ante-backend-staging
          tags: |
            type=raw,value=latest
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production-alpine

      - name: Trigger DigitalOcean deployment
        run: |
          echo "Triggering deployment for app ${{ secrets.DO_APP_ID_STAGING }}..."

          RESPONSE=$(curl -s -X POST \
            "https://api.digitalocean.com/v2/apps/${{ secrets.DO_APP_ID_STAGING }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.DO_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"force_build": false}')

          DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.deployment.id // empty')

          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Error: Failed to trigger deployment"
            echo "$RESPONSE" | jq '.'
            exit 1
          fi

          echo "Deployment triggered successfully!"
          echo "Deployment ID: $DEPLOYMENT_ID"
          echo "View deployment: https://cloud.digitalocean.com/apps/${{ secrets.DO_APP_ID_STAGING }}/deployments/$DEPLOYMENT_ID"

  notify:
    needs: [detect-changes, deploy-frontend-main, deploy-gate-app, deploy-guardian-app, build-and-deploy-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send deployment result notification
        run: |
          MESSAGE="üìä *ANTE ERP - Deployment Results*%0A%0A"
          MESSAGE="${MESSAGE}üì¶ *Repository:* ${{ github.repository }}%0A"
          MESSAGE="${MESSAGE}üîó *Workflow:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}%0A%0A"

          # Frontend Main deployment status
          if [ "${{ needs.deploy-frontend-main.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Frontend Main (ERP):* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://frontend-main-eight-tau.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-frontend-main.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Frontend Main (ERP):* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-frontend-main.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.frontend-main-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Frontend Main (ERP):* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Gate App deployment status
          if [ "${{ needs.deploy-gate-app.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Gate App:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://frontend-gate-b1aw6l0f8-ante-73eb5469.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-gate-app.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Gate App:* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-gate-app.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.gate-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Gate App:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Guardian App deployment status
          if [ "${{ needs.deploy-guardian-app.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Guardian App:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://frontend-guardian-lyx0af55s-ante-73eb5469.vercel.app%0A%0A"
          elif [ "${{ needs.deploy-guardian-app.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Guardian App:* Deployment failed%0A%0A"
          elif [ "${{ needs.deploy-guardian-app.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.guardian-app-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Guardian App:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Backend deployment status
          if [ "${{ needs.build-and-deploy-backend.result }}" == "success" ]; then
            MESSAGE="${MESSAGE}‚úÖ *Backend API:* Successfully deployed%0A"
            MESSAGE="${MESSAGE}   üîó https://ante-backend-staging-q6udd.ondigitalocean.app%0A%0A"
          elif [ "${{ needs.build-and-deploy-backend.result }}" == "failure" ]; then
            MESSAGE="${MESSAGE}‚ùå *Backend API:* Deployment failed%0A%0A"
          elif [ "${{ needs.build-and-deploy-backend.result }}" == "skipped" ] && [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            MESSAGE="${MESSAGE}‚ö†Ô∏è *Backend API:* Deployment skipped (error in workflow)%0A%0A"
          fi

          # Overall status
          if [ "${{ needs.deploy-frontend-main.result }}" == "success" ] || [ "${{ needs.deploy-gate-app.result }}" == "success" ] || [ "${{ needs.deploy-guardian-app.result }}" == "success" ] || [ "${{ needs.build-and-deploy-backend.result }}" == "success" ]; then
            if [ "${{ needs.deploy-frontend-main.result }}" == "failure" ] || [ "${{ needs.deploy-gate-app.result }}" == "failure" ] || [ "${{ needs.deploy-guardian-app.result }}" == "failure" ] || [ "${{ needs.build-and-deploy-backend.result }}" == "failure" ]; then
              MESSAGE="${MESSAGE}‚ö†Ô∏è *Status:* Partial Success"
            else
              MESSAGE="${MESSAGE}üéâ *Status:* All deployments successful!"
            fi
          else
            MESSAGE="${MESSAGE}üö® *Status:* Deployment failed - needs attention!"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"
