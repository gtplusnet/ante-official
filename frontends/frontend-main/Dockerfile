# Frontend Dockerfile - Optimized for production deployment
FROM node:20-alpine AS base

# Security: Add non-root user early
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Development stage
FROM base AS development
WORKDIR /app

# Install curl for health checks in development
RUN apk add --no-cache curl

# Copy package files
COPY package.json yarn.lock* ./

# Install dependencies
RUN yarn install

# Copy application code
COPY . .

# Change ownership to non-root user
RUN chown -R nodejs:nodejs /app
# Don't switch user in development mode to avoid permission issues
# USER nodejs

# Expose port
EXPOSE 9000

# Development command - run on all interfaces
CMD ["yarn", "dev", "--host", "0.0.0.0"]

# Builder stage - optimized for caching
FROM base AS builder
WORKDIR /app

# Accept build arguments for API configuration
ARG ENVIRONMENT=production
ARG API_URL=http://localhost:3000
ARG SOCKET_URL=ws://localhost:4000
ARG VITE_API_URL=${API_URL}
ARG VITE_SOCKET_URL=${SOCKET_URL}

# Sentry configuration arguments
ARG VITE_SENTRY_DSN=""
ARG VITE_SENTRY_ENVIRONMENT=${ENVIRONMENT}

# Supabase configuration arguments
ARG VITE_SUPABASE_URL=""
ARG VITE_SUPABASE_ANON_KEY=""
ARG VITE_ENABLE_SUPABASE_REALTIME="true"

# Set environment variables for the build process
ENV ENVIRONMENT=${ENVIRONMENT}
ENV API_URL=${API_URL}
ENV SOCKET_URL=${SOCKET_URL}
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_SOCKET_URL=${VITE_SOCKET_URL}
ENV VITE_SENTRY_DSN=${VITE_SENTRY_DSN}
ENV VITE_SENTRY_ENVIRONMENT=${VITE_SENTRY_ENVIRONMENT}
ENV VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
ENV VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
ENV VITE_ENABLE_SUPABASE_REALTIME=${VITE_ENABLE_SUPABASE_REALTIME}

# Copy package files first for better layer caching
COPY package.json yarn.lock* ./

# Install dependencies with production optimizations
RUN yarn install --frozen-lockfile --production=false

# Copy source code
COPY . .

# Ensure public directory exists for deployment info
RUN mkdir -p public

# Create .env file with the build arguments for Quasar to use
RUN echo "ENVIRONMENT=${ENVIRONMENT}" > .env && \
    echo "WHITELABEL=ante" >> .env && \
    echo "API_URL=${API_URL}" >> .env && \
    echo "SOCKET_URL=${SOCKET_URL}" >> .env && \
    echo "API_DELAY=1000" >> .env && \
    echo "VITE_GOOGLE_CLIENT_ID=755373784641-a3l7b95b29f5kp9tl389ltkkknsf41of.apps.googleusercontent.com" >> .env && \
    echo "VITE_FACEBOOK_APP_ID=1088650310072618" >> .env && \
    echo "VITE_SENTRY_DSN=${VITE_SENTRY_DSN}" >> .env && \
    echo "VITE_SENTRY_ENVIRONMENT=${VITE_SENTRY_ENVIRONMENT}" >> .env && \
    echo "VITE_SUPABASE_URL=${VITE_SUPABASE_URL}" >> .env && \
    echo "VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}" >> .env && \
    echo "VITE_ENABLE_SUPABASE_REALTIME=${VITE_ENABLE_SUPABASE_REALTIME}" >> .env && \
    echo "Created .env file with API_URL=${API_URL} and Supabase configuration"

# Create connections.json with the provided API URLs
RUN echo "[{\"NAME\":\"${ENVIRONMENT}\",\"API_URL\":\"${API_URL}\",\"SOCKET_URL\":\"${SOCKET_URL}\"}]" > connections.json && \
    echo "Created connections.json for ${ENVIRONMENT}"

# Build the application with the environment variables
RUN yarn build

# Copy deployment files generated by the build script to the dist folder
RUN if [ -f deployment-info.json ]; then \
        cp deployment-info.json dist/spa/deployment-info.json; \
    elif [ -f public/deployment-info.json ]; then \
        cp public/deployment-info.json dist/spa/deployment-info.json; \
    else \
        echo '{"deploymentKey":"not-set","environment":"'${ENVIRONMENT}'"}' > dist/spa/deployment-info.json; \
    fi && \
    # Also copy other deployment files if they exist \
    cp version.json dist/spa/version.json 2>/dev/null || true && \
    cp deployment-hash.json dist/spa/deployment-hash.json 2>/dev/null || true

# Remove development dependencies and clean cache
RUN yarn install --frozen-lockfile --production && \
    yarn cache clean

# Production stage - using distroless nginx for security
FROM gcr.io/distroless/static-debian12:nonroot AS production

# Metadata labels for better tracking
LABEL org.opencontainers.image.title="Ante ERP Frontend"
LABEL org.opencontainers.image.description="Vue.js/Quasar frontend for Ante ERP system"
LABEL org.opencontainers.image.vendor="Ante ERP"
LABEL org.opencontainers.image.licenses="Proprietary"

# Use custom Alpine build without tiff dependency
FROM alpine:3.21 AS nginx-base

# Install nginx without unnecessary dependencies that have vulnerabilities
RUN apk update && \
    apk add --no-cache \
        nginx \
        curl \
        tzdata \
    && rm -rf /var/cache/apk/* \
    && mkdir -p /usr/share/nginx/html /var/cache/nginx /var/log/nginx /run/nginx \
    && mkdir -p /var/lib/nginx/logs /var/lib/nginx/tmp \
    && chmod -R 755 /var/lib/nginx

# Create non-root user for nginx
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -u 1001 -G nginx-user

# Create necessary directories with proper permissions
RUN mkdir -p /var/cache/nginx /var/log/nginx /run/nginx /tmp \
    /var/lib/nginx/logs /var/lib/nginx/tmp/client_body \
    /var/lib/nginx/tmp/proxy /var/lib/nginx/tmp/fastcgi \
    /var/lib/nginx/tmp/uwsgi /var/lib/nginx/tmp/scgi && \
    chown -R nginx-user:nginx-user /var/cache/nginx /var/log/nginx /run/nginx /tmp \
    /usr/share/nginx/html /var/lib/nginx

# Copy nginx configuration file
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application from builder
COPY --from=builder --chown=nginx-user:nginx-user /app/dist/spa /usr/share/nginx/html

# Deployment info is already included in the dist/spa from builder stage

# Switch to non-root user
USER nginx-user

# Use non-privileged port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Optimized startup
CMD ["nginx", "-g", "daemon off;"]